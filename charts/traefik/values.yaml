# @schema
# title: Enabled
# type: boolean
# required: true
# default: false
# @schema
# -- Boolean to indicate that this chart is or will be installed in the cluster
enabled: false
# @schema
# title: Namespace
# description: The installation namespace
# required: true
# minLength: 1
# @schema
# -- The installation namespace.
# The kube-system namespace tells kubernetes that this app has a higher priority
namespace: 'kube-system'

# @schema
# title: Hostname
# description: The public hostname
# required: true
# format: hostname
# @schema
# -- The public Traefik dashboard hostname
# example: hostname: 'traefik-haship.nip.io'
hostname: ''

# @ignored The [default certificate](https://doc.traefik.io/traefik/https/tls/#default-certificate)
# It's used to provide https locally
# Set the default certificate as default traefik cert
# Mandatory for kubernetes-dashboard on a local development
# The rootCA should be added to the OS/Browser as trusted root CA
default_certificate:
  # The PEM content file
  # Not a path to the cert file relative to the working directory (ie cluster directory)
  # Set with `KUBEE_HELM_INSTALL_OPTIONS`
  # --set-file KUBEE.traefik.defaultCertificate.cert=cert/kube-x.dev+1.pem
  cert: ''
  # The PEM content file
  # Not a path to the key file relative to the working directory (ie cluster directory)
  # Set with `KUBEE_HELM_INSTALL_OPTIONS`
  # --set-file KUBEE.traefik.defaultCertificate.key=cert/kube-x.dev+1-key.pem
  key: ''



# Ingress Auth Configuration
auth:
  # @schema
  # enum: ['basic-auth','forward-auth']
  # @schema
  # -- The authentication middleware
  # This middleware is applied on internal web app (such as Traefik Dashboard, Prometheus, Alert Manager, ...)
  # The app or api endpoints are still available from an internal container
  # The supported middleware name are basic-auth and forward-auth
  # Before changing to forward-auth, you should test it with the whoami chart
  middleware_name: 'basic-auth'
  # -- The Private Network ranges
  # used for Ingress Ip restrictions (Traefik IpAllowList)
  # Example for a home ip: 143.176.206.80/32
  private_networks: [ ]

# List of [middlewares](https://doc.traefik.io/traefik/middlewares)
# referenced in Kubee charts
# The names are constant
middlewares:
  # A basic Auth Middleware
  # With the email as main identifier
  # https://doc.traefik.io/traefik/middlewares/http/basicauth/
  # The admin user is added
  basic_auth:
    # @schema
    # const: basic-auth
    # @schema
    # @ignored
    name: 'basic-auth'
    # -- List of extra users alongside the admin user
    users: {}
    # Example:
    # users:
    #   emailUser1: password1
    #   emailUser2: password2

  # @ignored
  # Create an IP Allow list for webhook of git service
  # Used in Gitops app such as Argocd
  # https://doc.traefik.io/traefik/middlewares/http/ipallowlist/
  git_hooks:
    # @schema
    # const: git-hooks
    # @schema
    name: 'git-hooks'
    service: 'github' # only supported for now
  # @ignored
  # Forward Auth to oauth2-proxy
  # https://doc.traefik.io/traefik/middlewares/http/forwardauth/
  forward_auth:
    # @schema
    # const: forward-auth
    # @schema
    name: 'forward-auth'
  # @ignored
  # Forward Auth middleware to oauth2-proxy that pass through a signed bearer
  # It can be applied on Kube API client such as Kubernetes Dashboard or Rbac Proxy
  forward_auth_bearer:
    # @schema
    # const: forward-auth-bearer
    # @schema
    name: 'forward-auth-bearer'
  # @ignored
  # Middleware to apply auth headers on website with an authentication form
  auth_headers:
    # @schema
    # const: auth-headers
    # @schema
    name: 'auth-headers'
  # @ignored
  # Private Network to allow only connection from known ip
  # Ip are given via the auth.private_networks
  private_network:
    name: 'private-network'

# @ignored
# Constant Name of additional entrypoint
# Used by template that creates IngressRoute (http and tcp)
entrypoints:
  smtps:
    # @schema
    # const: smtps
    # @schema
    # The port for SMTP over TLS (465)
    name: 'smtps'
  smtp:
    # @schema
    # const: smtp
    # @schema
    # The port for SMTP (25)
    name: 'smtp'
  smtpes:
    # @schema
    # const: smtpes
    # @schema
    # The port for SMTP Explicit TLS (587)
    name: 'smtpes'

# @ignored
# Traefik Helm Values
# https://github.com/traefik/traefik-helm-chart/blob/master/traefik/values.yaml
traefik:

  # We do it ourself
  # https://github.com/traefik/traefik-helm-chart/blob/master/EXAMPLES.md#access-traefik-dashboard-without-exposing-it
  ingressRoute:
    dashboard:
      enabled: false

  metrics:
    # Prometheus is enabled by default
    prometheus:
      # The metrics port is not in the traefik service
      # This value creates a dedicated metrics service to use with ServiceMonitor
      # Enable Prometheus Metrics https://doc.traefik.io/traefik/observability/metrics/prometheus/
      # Metrics Info: https://doc.traefik.io/traefik/observability/metrics/overview/#global-metrics
      service:
        enabled: false # We do it ourselves

  additionalArguments:
    # Don't verify cert on pods
    # [serversTransport.insecureSkipVerify](https://doc.traefik.io/traefik/routing/services/#insecureskipverify) is set to
    # true by default on server, otherwise there will be an error
    # if a pod loads a self-signed certificate with a CA that Traefik does not know.
    - '--serversTransport.insecureSkipVerify=true'
    # Debug
    # - '--log.level=DEBUG'
    # Logs just add too much noise on what is going on
    # - '--accesslog=false'
    # Allow cross namespace middleware in Ingress Route
    # https://doc.traefik.io/traefik/providers/kubernetes-crd/#allowcrossnamespace
    - '--providers.kubernetescrd.allowCrossNamespace=true'

  service:
    # type: LoadBalancer
    # You can't set up a nodePort because the port is a high-end port between 30000-32767
    # You can install it as DaemonSet + Node port ?
    # https://github.com/traefik/traefik-helm-chart/blob/master/EXAMPLES.md#install-as-a-daemonset
    ipFamilyPolicy: SingleStack
    ipFamilies:
      - IPv4
    spec: {
      # Allow Origin Remote IP to be forwarded
      externalTrafficPolicy: Local
    }

  # -- nodeSelector is the simplest recommended form of node selection constraint.
  nodeSelector: {
    # Context, by default:
    # * the deployment of Traefik is `LoadBalancer`
    # * K3s uses `ServiceLB (Klipper)` as load balancer controller
    # * ServiceLB (Klipper) label node "svccontroller.k3s.cattle.io/enablelb"=true to control where load balancer controller pods are installed
    #
    # We use the ServiceLB (Klipper) label "svccontroller.k3s.cattle.io/enablelb"=true
    # so that Traefik and the load balancer controller pods are always collocated
    #
    # ie with the following label applied on the server node
    #
    # kubectl label nodes kube-server-01.example.com svccontroller.k3s.cattle.io/enablelb=true
    #
    # Traefik would be installed on kube-server-01.example.com
    # The node should have the label: https://docs.k3s.io/advanced#node-labels-and-taints
    # "svccontroller.k3s.cattle.io/enablelb": "true"
  }


  providers:
    kubernetesCRD:
      # return 503, needed to start stopped container with sablier
      # https://acouvreur.github.io/sablier/#/guides/code-server-traefik-kubernetes?id=_3-deploy-traefik-using-helm
      allowEmptyServices: true
    kubernetesIngress:
      # return 503, needed to start stopped container with sablier
      allowEmptyServices: true

  ports:
    # Redirections
    web:
      # https://doc.traefik.io/traefik/routing/entrypoints/#redirection
      redirections:
        entryPoint:
          to: websecure
          scheme: https
    # Add the smtp port
    # It creates the smtp [entrypoint](https://doc.traefik.io/traefik/routing/entrypoints/)
    # - "--entryPoints.smtp.address=:8025/tcp"
    smtp:
      # Container port
      port: 8025
      # Port on the host
      exposedPort: 25
      # Defines whether the port is listed in the service if service.type is LoadBalancer or NodePort.
      expose:
        default: true
      # Protocol
      protocol: TCP
    # SMTP submission over TLS
    smtps:
      # Container port
      port: 8465
      # Port on the host
      exposedPort: 465
      # Defines whether the port is listed in the service if service.type is LoadBalancer or NodePort.
      expose:
        default: true
      # Protocol
      protocol: TCP
    # Add the smtp explicit tls port
    # It creates the smtp [entrypoint](https://doc.traefik.io/traefik/routing/entrypoints/)
    # - "--entryPoints.smtpes.address=:8587/tcp"
    smtpes:
      # Container port
      port: 8587
      # Port on the host
      exposedPort: 587
      # Defines whether the port is listed in the service if service.type is LoadBalancer or NodePort.
      expose:
        default: true
      # Protocol
      protocol: TCP


  # persistence:
  # -- Enable persistence using Persistent Volume Claims
  # ref: http://kubernetes.io/docs/user-guide/persistent-volumes/.
  # It can be used to store TLS certificates along with `certificatesResolvers.<name>.acme.storage`  option


# -- @ignored Internal Kubee constant
kubee_internal:
  # @schema
  # const: false
  # @schema
  # Constant used to not output template from kubee cross dependency in Chart.yaml
  # Don't change, don't touch
  install_cross_dependency: false

