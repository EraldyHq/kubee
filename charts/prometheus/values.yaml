# @schema
# title: Enabled
# type: boolean
# required: true
# default: false
# @schema
# -- Boolean to indicate that this chart is or will be installed in the cluster
enabled: false
# @schema
# title: Namespace
# description: The installation namespace
# required: true
# minLength: 1
# @schema
# -- The installation namespace.
# used by clients such as the Grafana Chart to create the data source URI
namespace: 'monitoring'

# @schema
# title: Hostname
# description: The public hostname
# required: true
# format: hostname
# @schema
# -- The public hostname. If not empty, an ingress is added
hostname: ''

# @ignored The name of the prometheus instance
# (used by clients such as the grafana Chart to create a connection)
name: 'kubee'

# -- The [prometheus version](https://github.com/prometheus/prometheus/releases)
version: '3.1.0'

# -- Prometheus Server Memory Limit
resources:
  # Depend on scrape interval, max_block_duration, number of metrics scraped, number of recording rules
  # Dynamically, if you query data above the max_block_duration, data is loaded in memory
  # Why? 400Mi.
  # This is:
  # * the default of Kube-Prometheus with default memory setting.
  # * the amount that we get after installing kubernetes-monitoring
  # This is our goal
  memory: '400Mi'

# -- Retention. How long to retain data (it's the prometheus server argument storage.tsdb.retention.time=24h).
# Data in memory is 2 hour old, by setting retention to 2h, we don't allow to query data over 2 hours and to load data in memory
# The default is 24h.
# Why 30m? Equal to max_block_duration so that we are sure that we will not increase memory of the prometheus pod
retention: '30m'

# -- The duration that Prometheus keeps the data in memory.
# The default is 2h. If the value is 2h, no arguments is applied.
# It's the prometheus tsdb server argument --storage.tsdb.max-block-duration=2h)
# Note that the default value is
# * 1h for the prometheus query ui
# * 1h for the grafana explore panel (ie last hour)
# * 15m for Kubernetes dashboard
# * 24h for Headlamp
# We chose 30m to be below the target of 400Mi memory size with kubernetes monitoring installed
max_block_duration: '30m'
# -- The default scrape interval for target
# It does influence memory as Prometheus keeps by default 2 hours of scraping in memory (max_block_duration)
# Default was 30s.
scrape_interval: '1m'

# -- Exporter authentication.
# This is a global authentication configuration for all exporters
exporter_auth:
  # Network Policy
  # They allow only ingress communication from a prometheus server
  network_policy:
    enabled: true
  # Rbac Proxy
  # # https://github.com/brancz/kube-rbac-proxy
  # Kube Prometheus uses rbac-proxy to add an authorization layer on exporter
  # We disable it by default:
  # - to minimize memory (20M by exporters) and the head-heck of authorization problem.
  # - because there is also network policy
  # If enabled, the exporter (node and state metrics) will get an extra containers
  # that handle RBAC authorization
  kube_rbac_proxy:
    enabled: false
    version: 'v0.18.2'

# -- Grafana cloud remote write prometheus integration
grafana_cloud:
  enabled: false
  # The username
  username: ''
  # The password
  password: ''
  # The regexp used to filter the metrics name (ie if the regexp matches, the metrics are passed keep to new relic)
  # Example:
  # `phpfpm_*` would send only the metrics starting with phpfpm
  # `(phpfpm|argocd|node|traefik)_(.*)` would send the metrics starting with phpfpm, argocd, node and traefik
  # Doc: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
  # By default, no filtering is applied
  relabel_keep_regex: ''
# -- New relic remote write prometheus integration
new_relic:
  enabled: false
  # for remote write
  bearer: ''
  # The regexp used to filter the metrics name (ie if the regexp matches, the metrics are passed keep to new relic)
  # Example:
  # `phpfpm_*` would send only the metrics starting with phpfpm
  # `(phpfpm|argocd|node|traefik)_(.*)` would send the metrics starting with phpfpm, argocd, node and traefik
  # Doc: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config
  # By default, no filtering is applied
  relabel_keep_regex: ''
# Prometheus Operator
operator:
  # CPU/Memory
  resources:
    # -- Prometheus Operator max memory
    memory: '50Mi'



# The
secret:
  # @schema
  # enum: [ 'Secret', 'ExternalSecret']
  # @schema
  # -- Kind of secret created
  # Values supported are `Secret` or `ExternalSecret`
  kind: 'Secret'

# -- @ignored Internal Kubee constant
kubee_internal:
  # @schema
  # const: false
  # @schema
  # Constant used to not output template from kubee cross dependency in Chart.yaml
  # Don't change, don't touch
  install_cross_dependency: false
