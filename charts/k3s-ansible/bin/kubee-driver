#!/usr/bin/env bash
# Kubee Helmet k3s-ansible cluster driver that installs k3s
# https://github.com/k3s-io/k3s-ansible



# The synopsis function is required by the doc::usage
synopsis(){

  cat << EOF

Manage a k3s cluster with the \`k3s-ansible\` cluster chart

\`\`\`bash
kubee cluster command
\`\`\`

where:
* \`command\` can be:
  * \`install\`            - Install k3s
  * \`conf\`               - Print the inventory file
  * \`ping\`               - Verify the connection to the hosts
  * \`play\`               - Upgrade or install k3s
  * \`restart\`            - Restart k3s
  * \`reboot\`             - Reboot the hosts
  * \`rotate-certs\`       - Rotate certs (Stop, rotate and start k3s)
  * \`shell\`              - Get a shell in the cluster
  * \`uninstall\`          - Uninstall k3s
  * \`upgrade\`            - Upgrade k3s

EOF

}

if [ "${1:-}" == "synopsis" ]; then
   synopsis
   exit
fi

ansible_inventory_file(){

   # Inventory
   local KUBEE_INVENTORY_FILE="${KUBEE_INFRA_INVENTORY_FILE:-"$KUBEE_CLUSTER_DIR/ansible-inventory.yml"}"

   # If there is non, we generate one with the kubee infra chart
   if [ ! -f "$KUBEE_INVENTORY_FILE" ]; then

     echo::debug "Cluster ansible inventory file $KUBEE_INVENTORY_FILE does not exist, using the kubee inventory chart output"
     KUBEE_INVENTORY_FILE="/dev/shm/kubee-infra-inventory.yml"
     # Log level of the sub command
     local BASHLIB_INFRA_TEMPLATE_LEVEL=$BASHLIB_ECHO_WARNING_LEVEL
     # If command or debug message, log also them in the template
     if [ "$BASHLIB_ECHO_LEVEL" -ge "$BASHLIB_ECHO_COMMAND_LEVEL" ]; then
       BASHLIB_INFRA_TEMPLATE_LEVEL=$BASHLIB_ECHO_LEVEL
     fi
     if ! echo::eval "BASHLIB_ECHO_LEVEL=$BASHLIB_INFRA_TEMPLATE_LEVEL; source kubee-helmet-helm template -s templates/ansible-inventory.yml 2>$COMMAND_STDOUT_FD >| $KUBEE_INVENTORY_FILE"; then
       echo::err "An error occurred while templating the k3s-ansible chart"
       return 1
     fi
     echo "$KUBEE_INVENTORY_FILE"
     return

   fi

   # Minimal templating with envsubst
   # Check the variables
   if ! UNDEFINED_VARS=$(template::check_vars -f "$KUBEE_INVENTORY_FILE"); then
     # Should exit because of the strict mode
     # but it was not working
     echo::err "Inventory variables missing: ${UNDEFINED_VARS[*]}"
     return 1
   fi
   local SHM_INVENTORY_FILE="/dev/shm/kubee-ansible-inventory.yml"

   echo::eval "envsubst < $KUBEE_INVENTORY_FILE >| $SHM_INVENTORY_FILE"
   echo "$SHM_INVENTORY_FILE"


}

upgrade(){
  if ! inventory=$(ansible_inventory_file); then
      echo::err "Error while generating the ansible inventory file"
      return 1
  fi
  set_private_key_file
  ansible-playbook -i "$inventory" k3s.orchestration.upgrade.yml
}

install_play(){
  if ! inventory=$(ansible_inventory_file); then
      echo::err "Error while generating the ansible inventory file"
      return 1
  fi
  set_private_key_file
  ansible-playbook -i "$inventory" ans_e.ans_e_base.kubee_site.yml
}

restart(){
  if ! inventory=$(ansible_inventory_file); then
      echo::err "Error while generating the ansible inventory file"
      return 1
  fi
  set_private_key_file
  ansible-playbook -i "$inventory" ans_e.ans_e_base.kubee_restart.yml
}


rotate_certs(){
  if ! inventory=$(ansible_inventory_file); then
      echo::err "Error while generating the ansible inventory file"
      return 1
  fi
  set_private_key_file
  ansible-playbook -i "$inventory" ans_e.ans_e_base.kubee_rotate_certs.yml
}


uninstall(){

  if ! inventory=$(ansible_inventory_file); then
      echo::err "Error while generating the ansible inventory file"
      return 1
  fi
  set_private_key_file
  ansible-playbook -i "$inventory" k3s.orchestration.reset.yml

}

reboot(){

  if ! inventory=$(ansible_inventory_file); then
      echo::err "Error while generating the ansible inventory file"
      return 1
  fi
  set_private_key_file
  ansible-playbook -i "$inventory" k3s.orchestration.reboot.yml

}



# Verify the connection before installation
# https://docs.ansible.com/ansible/latest/collections/ansible/builtin/ping_module.html
ping(){

  if ! inventory=$(ansible_inventory_file); then
    echo::err "Error while generating the ansible inventory file"
    return 1
  fi
  set_private_key_file
  if ! echo::eval "ansible -i $inventory all -m ping"; then
    echo::err "Hosts unreachable"
    return 1
  fi
  return

}

set_private_key_file(){
  # Private Key file
  export ANSIBLE_PRIVATE_KEY_FILE="${ANSIBLE_PRIVATE_KEY_FILE:-}"
  if [ "$ANSIBLE_PRIVATE_KEY_FILE" == "" ]; then
    if [ "${KUBEE_INFRA_CONNECTION_PRIVATE_KEY_FILE:-""}" != "" ]; then
      export ANSIBLE_PRIVATE_KEY_FILE="${KUBEE_CLUSTER_SERVER_CONNECTION_PRIVATE_KEY_FILE}"
    else
      if [ "${KUBEE_INFRA_CONNECTION_PRIVATE_KEY:-""}" != "" ]; then

        export ANSIBLE_PRIVATE_KEY_FILE="/dev/shm/ssh-key"
        echo "$KUBEE_INFRA_CONNECTION_PRIVATE_KEY" >| "$ANSIBLE_PRIVATE_KEY_FILE"

      else

        echo::warn "No server connection private key found in env"
        echo::warn ""
        echo::warn "Ssh will try to connect with"
        echo::warn " * the ssh agent keys if running"
        echo::warn " * the default ssh keys in ~/.ssh"
        echo::warn "If there is none, the connection will failed"
        echo::warn ""
        echo::warn "The following environment variables were empty"
        echo::warn "  * ANSIBLE_PRIVATE_KEY_FILE"
        echo::warn "  * KUBEE_INFRA_CONNECTION_PRIVATE_KEY_FILE"
        echo::warn "  * KUBEE_INFRA_CONNECTION_PRIVATE_KEY"

      fi
    fi
  fi
  if [ "${ANSIBLE_PRIVATE_KEY_FILE:-""}" != "" ]; then
    # to avoid Permissions 0644 for '/tmp/ssh-key' are too open
    # as we mount with the current user, docker inherit the permissions
    chmod 600 "$ANSIBLE_PRIVATE_KEY_FILE"
  fi
}

install_collections_required(){
  echo::debug "Installing ansible collections requirements:"
  local SCRIPT_DIR
  SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
  ansible-galaxy install -r "$SCRIPT_DIR/../ansible-requirements.yml" > "$COMMAND_STDOUT_FD"
}

main(){

  echo::debug "Starting k3s-ansible driver with the args: $*"

  # Making sure that we have the required collections
  install_collections_required

  while [[ $# -gt 0 ]]
    do
       case "$1" in
          "play"|"install")
             install_play
             return
             ;;
          "uninstall")
            uninstall
            return
            ;;
          "upgrade")
            upgrade
            return
            ;;
          "conf"|"template"|"inventory")
            yq "$(ansible_inventory_file)"
            return
            ;;
          "reboot")
            reboot
            return
            ;;
          "rotate-certs")
            rotate_certs
            return
            ;;
          "ping")
            ping
            return
          ;;
          "restart")
            restart
            return
            ;;
          "--help"|"-h"|"help"|"synopsis")
            synopsis
            return
            ;;
       esac
       shift
    done
    synopsis
    echo::err "No known command found"
    return 1
}

main "$@"

