{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "properties": {
    "cert-manager": {
      "description": " defined by either the name or alias of your dependency in Chart.yaml @ignored",
      "properties": {
        "clusterResourceNamespace": {
          "default": "",
          "description": "cluster-resource-namespace=my-namespace https://cert-manager.io/docs/configuration/#cluster-resource-namespace The Cluster Resource Namespace is defaulted as being the `cert-manager` namespace, A ClusterIssuer CA will create the certificate in this namespace https://cert-manager.io/docs/configuration/ca/#deployment",
          "required": [],
          "title": "clusterResourceNamespace"
        },
        "crds": {
          "properties": {
            "enabled": {
              "default": false,
              "required": [],
              "title": "enabled",
              "type": "boolean"
            }
          },
          "required": [
            "enabled"
          ],
          "title": "crds",
          "type": "object"
        },
        "namespace": {
          "default": "{{ .Values.namespace }}",
          "description": "Installation namespace",
          "required": [],
          "title": "namespace",
          "type": "string"
        },
        "prometheus": {
          "description": " https://github.com/cert-manager/cert-manager/blob/master/deploy/charts/cert-manager/README.template.md#prometheus",
          "properties": {
            "enabled": {
              "default": false,
              "description": "We don't create it ourselves because it's pretty hard.",
              "required": [],
              "title": "enabled",
              "type": "boolean"
            },
            "servicemonitor": {
              "properties": {
                "enabled": {
                  "default": false,
                  "required": [],
                  "title": "enabled",
                  "type": "boolean"
                }
              },
              "required": [
                "enabled"
              ],
              "title": "servicemonitor",
              "type": "object"
            }
          },
          "required": [
            "enabled",
            "servicemonitor"
          ],
          "title": "prometheus"
        },
        "webhook": {
          "properties": {
            "timeoutSeconds": {
              "default": 4,
              "required": [],
              "title": "timeoutSeconds",
              "type": "integer"
            }
          },
          "required": [
            "timeoutSeconds"
          ],
          "title": "webhook",
          "type": "object"
        }
      },
      "required": [
        "namespace",
        "crds",
        "webhook"
      ],
      "title": "cert-manager"
    },
    "cluster": {
      "description": "The kubee cluster chart",
      "properties": {
        "auth": {
          "description": "Cluster Auth",
          "properties": {
            "admin_user": {
              "description": "The admin user  * created as admin user in Kubernetes and other app  * added in basicAuth",
              "properties": {
                "cluster_role": {
                  "default": "cluster-admin",
                  "description": " required: true enum: [ 'cluster-admin', 'admin' ] @schema Kubernetes clusterRole * `cluster-admin` has full access * `admin` does not have access to node and cluster scope related object such as ClusterRoleBinding",
                  "enum": [
                    "cluster-admin",
                    "admin"
                  ],
                  "required": [],
                  "title": "cluster_role"
                },
                "email": {
                  "default": "",
                  "description": " format: email minLength: 1 @schema The admin email It's used by default in apps. For instance: * letsencrypt registration email * alert notifications: prometheus, argocd",
                  "format": "email",
                  "minLength": 1,
                  "required": [],
                  "title": "email"
                },
                "password": {
                  "default": "",
                  "description": " required: true minLength: 1 @schema The admin password",
                  "minLength": 1,
                  "required": [],
                  "title": "password"
                },
                "username": {
                  "default": "admin",
                  "description": " required: true minLength: 3 @schema The username",
                  "minLength": 3,
                  "required": [],
                  "title": "username"
                }
              },
              "required": [],
              "title": "admin_user"
            },
            "trusted_proxies": {
              "description": "Trusted Proxies If trusted, reverse proxies handler will proxy and augment the sensitive X-Forwarded-* request headers.  You should set the CIDR value of: * internal proxy such as traefik * and external proxy such as cloudflare It's used by Traefik and all auth application that needs the real ip and trust the X-forward headers",
              "items": {
                "required": []
              },
              "required": [],
              "title": "trusted_proxies"
            }
          },
          "required": [],
          "title": "auth",
          "type": "object"
        },
        "chart": {
          "default": "k3s-ansible",
          "description": "The cluster chart. The cluster chart is responsible for the installation/management of Kubernetes on the nodes",
          "required": [],
          "title": "chart"
        },
        "distribution": {
          "default": "k3s",
          "description": "The kubernetes distribution k3s is the distribution that has a cluster chart implemented.",
          "required": [],
          "title": "distribution"
        },
        "email": {
          "description": "Default smtp server parameters",
          "properties": {
            "smtp": {
              "description": "Smtp Configuration",
              "properties": {
                "from": {
                  "default": "",
                  "description": " format: email required: false @schema the default from",
                  "format": "email",
                  "required": [],
                  "title": "from"
                },
                "hello": {
                  "default": "",
                  "description": "hello (used to present itself, normally the email apex domain name)",
                  "required": [],
                  "title": "hello",
                  "type": "string"
                },
                "host": {
                  "default": "",
                  "description": " title: Smtp host description: The smtp hostname required: true format: hostname @schema The smtp host if the host is not empty, smtp configuration are added for example for argocd email notifications",
                  "format": "hostname",
                  "required": [],
                  "title": "Smtp host"
                },
                "password": {
                  "default": "",
                  "description": "the auth connection password",
                  "required": [],
                  "title": "password",
                  "type": "string"
                },
                "port": {
                  "default": 465,
                  "description": " title: Smtp Port description: The Smtp port type: integer required: false @schema the smtp port",
                  "required": [],
                  "title": "Smtp Port",
                  "type": "integer"
                },
                "username": {
                  "default": "",
                  "description": "the auth connection username",
                  "required": [],
                  "title": "username",
                  "type": "string"
                }
              },
              "required": [],
              "title": "smtp"
            }
          },
          "required": [],
          "title": "email",
          "type": "object"
        },
        "global": {
          "description": "Global values are values that can be accessed from any chart or subchart by exactly the same name.",
          "required": [],
          "title": "global",
          "type": "object"
        },
        "name": {
          "default": "kubee",
          "description": "The cluster name used: * to identify the cluster (for instance, on prometheus remote-write metrics, the name is added as label) * as default first instance name for operator (for instance, prometheus operator allows to install multiple prometheus that needs to be unique. Kube-prometheus asks for a unique name)",
          "required": [],
          "title": "name"
        }
      },
      "required": [],
      "title": "kubee-cluster",
      "type": "object"
    },
    "enabled": {
      "default": false,
      "description": "Boolean to indicate that this chart is or will be installed in the cluster When disabled, the default ingress certificate specified on Traefik is used",
      "required": [],
      "title": "Enabled",
      "type": "boolean"
    },
    "global": {
      "description": "Global values are values that can be accessed from any chart or subchart by exactly the same name.",
      "required": [],
      "title": "global",
      "type": "object"
    },
    "issuers": {
      "description": "The ca issuers",
      "properties": {
        "kubee": {
          "description": "The kubee issuer is used to create certificates for the internal service and pods (ie the local private domain cluster.local)",
          "properties": {
            "bundle_name": {
              "const": "kubee-ca-bundle",
              "default": "kubee-ca-bundle",
              "description": " const: 'kubee-ca-bundle' @schema The kubee cert bundle with the root CA and the kubee ca cert It's distributed to clients to create secure TLS connection",
              "required": [],
              "title": "bundle_name"
            },
            "name": {
              "const": "kubee-ca",
              "default": "kubee-ca",
              "description": " const: 'kubee-ca' @schema The kubee issuer name.",
              "required": [],
              "title": "name"
            }
          },
          "required": [],
          "title": "kubee"
        },
        "public": {
          "description": "The public issuer name. The public issuer is used to create certificate for public access (ie public network / public domain name) Its name should be changed to `letsencrypt-prod` when the `letsencrypt-staging` is working and validated",
          "properties": {
            "dns01": {
              "description": "[Dns01](https://cert-manager.io/docs/configuration/acme/dns01/)",
              "properties": {
                "cloudflare": {
                  "description": " Enabled if the domain list is not empty",
                  "properties": {
                    "api_token": {
                      "description": " `ApiToken` is now the preferred method (ApiKey is deprecated)",
                      "properties": {
                        "key": {
                          "default": "cloudflare-api-token",
                          "description": " required: true minLength: 1 @schema The key property (in the secret of k8s or any other provider)",
                          "minLength": 1,
                          "required": [],
                          "title": "key"
                        },
                        "kind": {
                          "default": "Secret",
                          "description": " required: true enum: [ 'Secret', 'ExternalSecret' ] @schema The type of secret A secret or external secret The chart is responsible for supporting them",
                          "enum": [
                            "Secret",
                            "ExternalSecret"
                          ],
                          "required": [],
                          "title": "kind"
                        },
                        "property": {
                          "default": "",
                          "description": " Used with the External Secret type",
                          "required": [],
                          "title": "property"
                        },
                        "value": {
                          "default": "",
                          "description": " (Used with the k8s secret type to create a Kubernetes secret)",
                          "required": [],
                          "title": "value"
                        }
                      },
                      "required": [
                        "kind",
                        "key"
                      ],
                      "title": "api_token"
                    },
                    "dns_zones": {
                      "description": " format: hostname required: true minLength: 0 @schema The dns Zones that are managed by cloudflare, Cloudflare is enabled if the list is not empty",
                      "format": "hostname",
                      "items": {
                        "required": []
                      },
                      "minLength": 0,
                      "required": [],
                      "title": "dns_zones"
                    }
                  },
                  "required": [
                    "dns_zones"
                  ],
                  "title": "cloudflare"
                }
              },
              "required": [],
              "title": "dns01",
              "type": "object"
            },
            "name": {
              "default": "letsencrypt-staging",
              "description": " enum: [ 'letsencrypt-staging', 'letsencrypt-prod' ] required: true @schema The public issuer name.",
              "enum": [
                "letsencrypt-staging",
                "letsencrypt-prod"
              ],
              "required": [],
              "title": "name"
            }
          },
          "required": [
            "name",
            "dns01"
          ],
          "title": "public"
        }
      },
      "required": [],
      "title": "issuers",
      "type": "object"
    },
    "kubee_internal": {
      "description": " Don't touch, used to block template output of cross dependency",
      "properties": {
        "install_cross_dependency": {
          "default": false,
          "required": [],
          "title": "install_cross_dependency",
          "type": "boolean"
        }
      },
      "required": [
        "install_cross_dependency"
      ],
      "title": "kubee_internal"
    },
    "namespace": {
      "default": "cert-manager",
      "description": "The installation namespace",
      "minLength": 1,
      "required": [],
      "title": "Namespace"
    },
    "trust-manager": {
      "description": " @ignored",
      "properties": {
        "app": {
          "properties": {
            "metrics": {
              "properties": {
                "service": {
                  "properties": {
                    "servicemonitor": {
                      "properties": {
                        "enabled": {
                          "default": false,
                          "description": "We do it ourselves so that there is some logic",
                          "required": [],
                          "title": "enabled",
                          "type": "boolean"
                        }
                      },
                      "required": [
                        "enabled"
                      ],
                      "title": "servicemonitor",
                      "type": "object"
                    }
                  },
                  "required": [
                    "servicemonitor"
                  ],
                  "title": "service",
                  "type": "object"
                }
              },
              "required": [
                "service"
              ],
              "title": "metrics",
              "type": "object"
            }
          },
          "required": [
            "metrics"
          ],
          "title": "app",
          "type": "object"
        },
        "crds": {
          "properties": {
            "enabled": {
              "default": "false",
              "description": " no matches for kind \"Bundle\" in version \"trust.cert-manager.io/v1alpha1\"",
              "required": [],
              "title": "enabled"
            }
          },
          "required": [],
          "title": "crds",
          "type": "object"
        },
        "secretTargets": {
          "description": "Traefik require the TLS data to be secret",
          "properties": {
            "authorizedSecrets": {
              "description": " not be good executing from another context when creating our values file",
              "items": {
                "anyOf": [
                  {
                    "required": [],
                    "type": "string"
                  }
                ],
                "required": []
              },
              "required": [],
              "title": "authorizedSecrets"
            },
            "enabled": {
              "default": true,
              "required": [],
              "title": "enabled",
              "type": "boolean"
            }
          },
          "required": [
            "enabled"
          ],
          "title": "secretTargets",
          "type": "object"
        }
      },
      "required": [
        "crds",
        "app",
        "secretTargets"
      ],
      "title": "trust-manager"
    }
  },
  "required": [
    "enabled",
    "namespace",
    "issuers"
  ],
  "type": "object"
}