
# @schema
# title: Enabled
# type: boolean
# required: true
# default: false
# @schema
# -- Boolean to indicate that this chart is or will be installed in the cluster
# When disabled, the default ingress certificate specified on Traefik is used
enabled: false

# @schema
# title: Namespace
# description: The installation namespace
# required: true
# minLength: 1
# @schema
# -- The installation namespace
namespace: 'cert-manager'


# The ca issuers
issuers:
  # -- The public issuer name.
  # The public issuer is used to create certificate for public access (ie public network / public domain name)
  # Its name should be changed to `letsencrypt-prod` when the `letsencrypt-staging` is working and validated
  public:
    # @schema
    # enum: [ 'letsencrypt-staging', 'letsencrypt-prod' ]
    # required: true
    # @schema
    # The public issuer name.
    name: 'letsencrypt-staging'
    # [Dns01](https://cert-manager.io/docs/configuration/acme/dns01/)
    dns01:
      # Cloudflare
      # Enabled if the domain list is not empty
      cloudflare:
        # The api token.
        # `ApiToken` is now the preferred method (ApiKey is deprecated)
        api_token:
          # @schema
          # required: true
          # enum: [ 'Secret', 'ExternalSecret' ]
          # @schema
          # The type of secret
          # A secret or external secret
          # The chart is responsible for supporting them
          kind: 'Secret'
          # The api token value.
          # (Used with the k8s secret type to create a Kubernetes secret)
          value: ''
          # @schema
          # required: true
          # minLength: 1
          # @schema
          # The key property (in the secret of k8s or any other provider)
          key: 'cloudflare-api-token'
          # Inside a key, you may have a property name (Example: vault)
          # Used with the External Secret type
          property: ''
        # @schema
        # format: hostname
        # required: true
        # minLength: 0
        # @schema
        # The dns Zones that are managed by cloudflare,
        # Cloudflare is enabled if the list is not empty
        dns_zones: [ ]
  # -- The kubee issuer is used to create certificates for the internal service and pods (ie the local private domain cluster.local)
  kubee:
    # @schema
    # const: 'kubee-ca'
    # @schema
    # The kubee issuer name.
    name: 'kubee-ca' # The name pattern follows istio with istio-ca.
    # @schema
    # const: 'kubee-ca-bundle'
    # @schema
    # The kubee cert bundle with the root CA and the kubee ca cert
    # It's distributed to clients to create secure TLS connection
    bundle_name: 'kubee-ca-bundle' # if you change this value, you need to change the authorizedSecrets value below


# https://github.com/cert-manager/cert-manager/blob/release-1.16/deploy/charts/cert-manager/values.yaml
# defined by either the name or alias of your dependency in Chart.yaml
# @ignored
cert-manager:
  # Installation namespace
  namespace: '{{ .Values.namespace }}'
  crds:
    enabled: false
  webhook:
    timeoutSeconds: 4   # Example: changing the webhook timeout using a Helm parameter
  # https://cert-manager.io/docs/devops-tips/prometheus-metrics/
  # https://github.com/cert-manager/cert-manager/blob/master/deploy/charts/cert-manager/README.template.md#prometheus
  prometheus:
    # We don't create it ourselves because it's pretty hard.
    enabled: false
    servicemonitor:
      enabled: false
  # Cluster resource namespace
  # The namespace used to store cluster wide data (such as DNS provider credentials, certificate, ...)
  # Set the default namespace to search for a resource on the cert-manager controller
  # --cluster-resource-namespace=my-namespace
  # https://cert-manager.io/docs/configuration/#cluster-resource-namespace
  # The Cluster Resource Namespace is defaulted as being the `cert-manager` namespace,
  # A ClusterIssuer CA will create the certificate in this namespace
  # https://cert-manager.io/docs/configuration/ca/#deployment
  clusterResourceNamespace: ""

# https://github.com/cert-manager/trust-manager/tree/v0.16.0/deploy/charts/trust-manager
# @ignored
trust-manager:
  crds:
    # We do it ourselves to avoid
    # no matches for kind "Bundle" in version "trust.cert-manager.io/v1alpha1"
    enabled: false
  app:
    metrics:
      service:
        servicemonitor:
          # We do it ourselves so that there is some logic
          enabled: false
  # Traefik require the TLS data to be secret
  secretTargets:
    enabled: true
    # We can't use a tpl with .Values.issuers.kubee.bundle_name because it will
    # not be good executing from another context when creating our values file
    authorizedSecrets: [ 'kubee-cert-bundle' ]

# @ignored
# Don't touch, used to block template output of cross dependency
kubee_internal:
  install_cross_dependency: false