.\" Automatically generated by Pandoc 2.17.1.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "promtool" "1" "" "Version Latest" "Promtool shipped in Docker"
.hy
.SH DESCRIPTION
.PP
The
PromTool (https://prometheus.io/docs/prometheus/latest/command-line/promtool/)
cli driven by env
.SH EXAMPLE
.IP
.nf
\f[C]
cat metrics.prom | promtool check metrics
curl -s http://localhost:9090/metrics | promtool check metrics
promtool test rules test.yml
\f[R]
.fi
.PP
The files (\f[V]metrics.prom\f[R], \f[V]test.yml\f[R]) should be in the
current directory.
.SH EXECUTION
.PP
The \f[V]PromTool\f[R] is executed with: * the Prometheus docker image *
only the working directory available
.SH Environment Variable
.PP
This script will create automatically the following options based on the
environment
.SS The url flag
.PP
The \f[V]--url\f[R] flag (The URL for the Prometheus server) is created
via the \f[V]KUBE_X_PROM_URL\f[R] (default to
\f[V]http://localhost:9090\f[R])
.SS The http.config.file
.PP
The \f[V]--http.config.file\f[R] defines the HTTP client configuration
file for promtool to connect to Prometheus.
.PP
We support creating it for \f[V]Basic Auth\f[R] with secrets stored in
pass (https://www.passwordstore.org/)
.PP
List: * For the basic_auth
user (https://prometheus.io/docs/alerting/latest/configuration/#http_config):
\f[V]KUBE_X_PROM_BASIC_AUTH_PASS_USER\f[R]
.IP
.nf
\f[C]
# ie this command should return the user
pass \[dq]$KUBE_X_PROM_BASIC_AUTH_PASS_USER\[dq]
\f[R]
.fi
.IP \[bu] 2
For the basic_auth
password (https://prometheus.io/docs/alerting/latest/configuration/#http_config):
\f[V]KUBE_X_PROM_BASIC_AUTH_PASS_PASSWORD\f[R]
.IP
.nf
\f[C]
# ie this command should return the password
pass \[dq]$KUBE_X_PROM_BASIC_AUTH_PASS_PASSWORD\[dq]
\f[R]
.fi
.SH SYNOPSIS
.IP
.nf
\f[C]
usage: promtool [<flags>] <command> [<args> ...]

Tooling for the Prometheus monitoring system.


Flags:
  -h, --[no-]help            Show context-sensitive help (also try --help-long and --help-man).
      --[no-]version         Show application version.
      --[no-]experimental    Enable experimental commands.
      --enable-feature= ...  Comma separated feature names to enable. Currently unused.

Commands:
help [<command>...]
    Show help.

check service-discovery [<flags>] <config-file> <job>
    Perform service discovery for the given job name and report the results, including relabeling.

check config [<flags>] <config-files>...
    Check if the config files are valid or not.

check web-config <web-config-files>...
    Check if the web config files are valid or not.

check healthy [<flags>]
    Check if the Prometheus server is healthy.

check ready [<flags>]
    Check if the Prometheus server is ready.

check rules [<flags>] [<rule-files>...]
    Check if the rule files are valid or not.

check metrics
    Pass Prometheus metrics over stdin to lint them for consistency and correctness.

    examples:

    $ cat metrics.prom | promtool check metrics

    $ curl -s http://localhost:9090/metrics | promtool check metrics

query instant [<flags>] <server> <expr>
    Run instant query.

query range [<flags>] <server> <expr>
    Run range query.

query series --match=MATCH [<flags>] <server>
    Run series query.

query labels [<flags>] <server> <name>
    Run labels query.

query analyze --server=SERVER --type=TYPE --match=MATCH [<flags>]
    Run queries against your Prometheus to analyze the usage pattern of certain metrics.

debug pprof <server>
    Fetch profiling debug information.

debug metrics <server>
    Fetch metrics debug information.

debug all <server>
    Fetch all debug information.

push metrics [<flags>] <remote-write-url> [<metric-files>...]
    Push metrics to a prometheus remote write (for testing purpose only).

test rules [<flags>] <test-rule-file>...
    Unit tests for rules.

tsdb bench write [<flags>] [<file>]
    Run a write performance benchmark.

tsdb analyze [<flags>] [<db path>] [<block id>]
    Analyze churn, label pair cardinality and compaction efficiency.

tsdb list [<flags>] [<db path>]
    List tsdb blocks.

tsdb dump [<flags>] [<db path>]
    Dump samples from a TSDB.

tsdb dump-openmetrics [<flags>] [<db path>]
    [Experimental] Dump samples from a TSDB into OpenMetrics text format, excluding native histograms and staleness markers, which are not representable in OpenMetrics.

tsdb create-blocks-from openmetrics [<flags>] <input file> [<output directory>]
    Import samples from OpenMetrics input and produce TSDB blocks. Please refer to the storage docs for more details.

tsdb create-blocks-from rules --start=START [<flags>] <rule-files>...
    Create blocks of data for new recording rules.

promql format <query>
    Format PromQL query to pretty printed form.

promql label-matchers set [<flags>] <query> <name> <value>
    Set a label matcher in the query.

promql label-matchers delete <query> <name>
    Delete a label from the query.

\f[R]
.fi
