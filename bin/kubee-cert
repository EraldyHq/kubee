#!/bin/bash


# shellcheck source=./bashlib-doc.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-doc.sh"

synopsis(){

  echo "Usage:"
  echo ''
  echo 'Return kubernetes certs in plain text'
  echo ''
  echo '```bash'
  # shellcheck disable=SC2005
  echo "$(basename "$0") command"
  echo '```'
  echo "where: command may be:"
  # shellcheck disable=SC2016
  echo '  * `config-client` : Print the client certificate chain found in the kubeconfig file'
  # shellcheck disable=SC2016
  echo '  * `config-cluster` : Print the cluster certificate authority in the kubeconfig file'
  # shellcheck disable=SC2016
  echo '  * `secret-tls` : Print the tls certificate stored in a secret in plain text'
  # shellcheck disable=SC2016
  echo '  * `secret-ca`  : Print the ca certificate stored in a secret in plain text'

}

secret_synopsis(){

  echo "Usage:"
  echo ''
  echo 'Return the certs in plain text from a Kubernetes secret'
  echo ''
  echo '```bash'
  # shellcheck disable=SC2005
  echo "$(basename "$0") secret [-n|--namespace namespace] name"
  echo '```'
  echo "where: command may be:"
  # shellcheck disable=SC2016
  echo '  * `n` : The namespace (default to KUBEE_APP_NAMESPACE)'
  # shellcheck disable=SC2016
  echo '  * `name` : The secret name'
  # shellcheck disable=SC2016
  echo '  * `-t|--type` : The type tls or ca'

}

HELP=${1:-}
if [[ $HELP == "synopsis" ]]; then
  doc::help synopsis
  exit
fi

if [[ $HELP =~ -h|--help|help ]]; then
  doc::help synopsis
  exit
fi

# Print the CA and TLS cert of a secret in plain text
function print_cert_secret(){

  # This is a kubectl command - set kubeconfig
  kubee::set_kubeconfig_env

  local SECRET_NAME=""
  local SECRET_NAMESPACE=${KUBEE_CONNECTION_NAMESPACE}
  local TYPE_CERT="tls"
  local PRINT_OBJECT="cert"
  # The get secret command
  # no quote in jsonpath, not jsonpath='{.data.tls\.crt}' otherwise we get the quotes '' in the output
  local GET_TLS_SECRET_COMMAND=("kubectl" "get" "secret" )
  local args
  args=$(getopt -l "namespace:type" -o "n:t:" -- "$@")
  # eval set to set the positional arguments back to $args
  eval set -- "$args"
  while [[ $# -gt 0 ]]
  do
     case "$1" in
      "-n"|"--namespace")
        shift
        SECRET_NAMESPACE="$1"
        shift
        ;;
      "-t"|"--type")
        shift
        TYPE_CERT="$1"
        shift
        ;;
      "-p"|"--public-key")
        PRINT_OBJECT="public-key"
        shift
        ;;
      "--")
        shift
        ;;
      *)
        SECRET_NAME="$1"
        break
     esac
  done

  GET_TLS_SECRET_COMMAND+=("-o" "jsonpath=\"{.data.$TYPE_CERT\.crt}\"")
  GET_TLS_SECRET_COMMAND+=("-n" "$SECRET_NAMESPACE")

  if [ "$SECRET_NAME" == "" ]; then
    doc::help secret_synopsis
    echo::err "A secret name is mandatory"
    return 1
  fi
  GET_TLS_SECRET_COMMAND+=("$SECRET_NAME")



  local CERT
  CERT=$(echo::eval "${GET_TLS_SECRET_COMMAND[*]} | base64 -d" )
  # <() is a https://en.wikipedia.org/wiki/Process_substitution to give a file (ie URI)
  case "$PRINT_OBJECT" in
    "cert")
    echo "Print $TYPE_CERT cert"
    openssl storeutl -noout -text <(echo "$CERT")
    ;;
    "public-key")
    echo "Print public key of $TYPE_CERT cert"
    openssl x509 -pubkey -noout <(echo "$CERT")
    ;;
    *)
      echo:err "Print object $PRINT_OBJECT is unknown"
      return 1
  esac




}

function print_cert_client_kubeconfig(){
  # openssl storeutl permits to read a bundle. Take a file as input
  # <() is a https://en.wikipedia.org/wiki/Process_substitution to give a file (ie URI)
  openssl storeutl -noout -text <(kubectl config view --minify --raw --output 'jsonpath={..user.client-certificate-data}' | base64 -d)
}

function print_cert_cluster_kubeconfig(){
  # openssl storeutl permits to read a bundle. Take a file as input
  # <() is a https://en.wikipedia.org/wiki/Process_substitution to give a file (ie URI)
  openssl storeutl -noout -text <(kubectl config view --minify --raw --output 'jsonpath={..cluster.certificate-authority-data}' | base64 -d)
}

function verify_jwt(){

  local secret
  local JWT="$2"

  # Extract JWT from Authorization header
  #AUTH_HEADER="Authorization: Bearer your.jwt.token.here"
  #JWT=$(echo "$AUTH_HEADER" | awk '{print $3}')

  # Extract the header and payload
  # Header  = {
  #  "alg": "RS256",
  #  "kid": "5c6097630863e16d9eb72adf2c6f4624aeb1f6aa"
  #}
  local HEADER
  HEADER=$(echo "$JWT" | cut -d "." -f1 | base64 -d 2>/dev/null | jq -r .)
  local ALG
  ALG=$(echo "$HEADER" | jq -r .alg)
  KID=$(echo "$HEADER" | jq -r .kid)

  # Extract the signature
  # The third and last part of JWT
  SIGNATURE=$(echo "$JWT" | cut -d "." -f3 | tr '_-' '/+' | base64 -d 2>/dev/null)

  # Get the public key from the CA cert
  openssl x509 -in "$CA_CERT" -pubkey -noout > pubkey.pem

  # Verify the signature
  echo -n "$(echo "$JWT" | cut -d "." -f1,2 | tr -d '\n' | base64 -d 2>/dev/null)" | \
      openssl dgst -sha256 -verify pubkey.pem -signature <(echo -n "$SIGNATURE")

}

COMMAND=${1:-}
if [ "$COMMAND" == "" ]; then
    doc::help synopsis
    echo::err "A command is mandatory"
    exit 1
fi
shift


case "$COMMAND" in
  "config-client")
    print_cert_client_kubeconfig
    ;;
  "config-cluster")
    print_cert_cluster_kubeconfig
    ;;
  "secret-ca")
    print_cert_secret -t "ca" "$@"
    # see also
    # kubectl describe certificate xxxx
    ;;
  "secret-tls")
    print_cert_secret -t "tls" "$@"
    # see also
    # kubectl describe certificate xxxx
    ;;
  "verify_jwt")
    verify_jwt "$@"
  ;;
  *)
    doc::help synopsis
    echo::err "command $1 not found"
    exit 1
esac







