#!/usr/bin/env bash

set -TCEeuo pipefail
# shellcheck source=../..//bash-lib/lib/bashlib-error.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-error.sh"
error::set_trap
# shellcheck source=../../bash-lib/lib/bashlib-echo.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-echo.sh"
# shellcheck source=../../bash-lib/lib/bashlib-doc.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-doc.sh"
# shellcheck source=../../bash-lib/lib/bashlib-template.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-template.sh"
# shellcheck source=./kube-x-lib.sh
source "kube-x-lib.sh"


generate_and_get_helm_values_path(){

  # Default
  # export is mandatory to go in a subshell
  export KUBE_X_CLUSTER_PROMETHEUS_ENABLED="${KUBE_X_CLUSTER_PROMETHEUS_ENABLED:-false}"
  export KUBE_X_CLUSTER_ADMIN_USERNAME="${KUBE_X_CLUSTER_ADMIN_USERNAME:-admin}"
  export KUBE_X_CLUSTER_ADMIN_PASSWORD="${KUBE_X_CLUSTER_ADMIN_PASSWORD:-$(openssl rand -base64 10)}"

  if [ "${KUBE_X_CLUSTER_NAME:-}" == "" ]; then
    echo::err "The cluster name is mandatory"
    return 1
  fi
  SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
  local KUBE_X_CLUSTER_DIR;
  KUBE_X_CLUSTER_DIR="${SCRIPT_DIR}/../resources/cluster/$KUBE_X_CLUSTER_NAME"

  # Template
  local KUBE_X_HELM_VALUES="${KUBE_X_CLUSTER_DIR}/helm-values.yaml"
  if [ ! -f "$KUBE_X_HELM_VALUES" ]; then
    echo::err "No helm file found at $KUBE_X_HELM_VALUES"
    return 1;
  fi

  # Check the variables
  if ! UNDEFINED_VARS=$(template::check_vars -f "$KUBE_X_HELM_VALUES"); then
     # Should exit because of the strict mode
     # but it was not working
     echo::err "Helm Values variables missing: ${UNDEFINED_VARS[*]}"
     return 1
  fi
  local SHM_HELM_VALUES="/dev/shm/kube-x-helm-values.yml"

  envsubst < "$KUBE_X_HELM_VALUES" >| "$SHM_HELM_VALUES"
  echo "$SHM_HELM_VALUES"

}

install(){

  APP_NAME="${1:-}"
  if [ "$APP_NAME" == "" ]; then
    echo::err "An app name is mandatory as argument"
    return 1
  fi

  read -r APP_NAMESPACE APP_NAME <<< "$(kube::get_qualified_app_name "$APP_NAME")"
  echo "$APP_NAMESPACE $APP_NAME"

  # Crds
  if APP_CRDS_DIRECTORY=$(kube::get_app_crds_directory "$APP_NAMESPACE"); then
    echo "$APP_CRDS_DIRECTORY"
    pushd "$APP_CRDS_DIRECTORY"
    APP_RELEASE_CRDS_NAME="$APP_NAMESPACE-crds"
    CHART_APP_VERSION=$(yq '.appVersion' Chart.yaml)
    if ! kube::is_helm_chart_installed "$APP_RELEASE_CRDS_NAME" "$APP_NAMESPACE" "$CHART_APP_VERSION"; then
      command::echo_eval "helm upgrade --install -n $APP_NAMESPACE --create-namespace $APP_RELEASE_CRDS_NAME ."
    else
      echo::info "Chart $APP_RELEASE_CRDS_NAME already installed"
    fi
    popd
  fi

  # App
  APP_DIRECTORY=$(kube::get_app_directory "$APP_NAMESPACE")
  echo::info "Going to App directory: $APP_DIRECTORY"
  pushd "$APP_DIRECTORY"
  APP_RELEASE_NAME="$APP_NAMESPACE"

  local HELM_INSTALL_COMMAND=()
  HELM_INSTALL_COMMAND+=(
    "helm"
    "upgrade"
    "--install"
    "-n" "$APP_NAMESPACE"
    "--create-namespace"
    "--dependency-update"
    )
  # The kube-x values
  if ! KUBE_X_VALUES_PATH=$(generate_and_get_helm_values_path); then
    echo::err "Error while trying to get the kube-x-helm values"
    return 1
  fi
  HELM_INSTALL_COMMAND+=("-f" "${KUBE_X_VALUES_PATH}")

  # To update the kube-x helm
  command::echo_eval "helm dependency update"

  # --dependency-update flag to avoid the `helm dependency build` error:
  # `Error: no repository definition for https://traefik.github.io/charts. Please add the missing repos via 'helm repo add'`
  # See https://github.com/helm/helm/issues/7214
  # values.yaml file is taken by default
  HELM_INSTALL_COMMAND+=("$APP_RELEASE_NAME" ".")
  command::echo_eval "${HELM_INSTALL_COMMAND[*]}"
  popd

}


# The synopsis function is required by the doc::usage
synopsis(){

  cat << 'EOF'
```bash
kube-x-cluster-app command options
```

where `command` can be:

* 'install' - Install an app
* 'values'  - Shows the values


EOF

}


# Assign the first argument to a string
COMMAND=${1:-}
if [ "$COMMAND" = "" ]; then
    doc::help
    echo::err "A command is mandatory"
    exit 1
fi
# Help
if [[ "$COMMAND" =~ "-h"|"--help"|"help" ]]; then
  doc::help
  exit
fi
shift  # Remove the first argument from the argument list

case "$COMMAND" in
  "install")
     install "$@" || error::exit $?
    ;;
  "synopsis")
    synopsis
    ;;
  "values")
    cat "$(generate_and_get_helm_values_path)"
    ;;
  *)
    doc::help synopsis
    echo::err  "Command $COMMAND is unknown"
    exit 1
esac
