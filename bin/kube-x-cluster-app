#!/usr/bin/env bash

set -TCEeuo pipefail
# shellcheck source=../..//bash-lib/lib/bashlib-error.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-error.sh"
error::set_trap
# shellcheck source=../../bash-lib/lib/bashlib-echo.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-echo.sh"
# shellcheck source=../../bash-lib/lib/bashlib-doc.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-doc.sh"
# shellcheck source=../../bash-lib/lib/bashlib-template.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-template.sh"
# shellcheck source=./kube-x-lib.sh
source "kube-x-lib.sh"


generate_and_get_values_path(){

  # Template
  local KUBE_X_HELM_VALUES;
  KUBE_X_HELM_VALUES=$(realpath "${KUBE_X_CLUSTER_DIR}/values.yaml")
  if [ ! -f "$KUBE_X_HELM_VALUES" ]; then
    echo::err "No helm file found at $KUBE_X_HELM_VALUES"
    return 1;
  fi

  # Check the variables
  if ! UNDEFINED_VARS=$(template::check_vars -f "$KUBE_X_HELM_VALUES"); then
     # Should exit because of the strict mode
     # but it was not working
     echo::err "Values variables missing: ${UNDEFINED_VARS[*]} in file $KUBE_X_HELM_VALUES"
     return 1
  fi
  local SHM_HELM_VALUES="/dev/shm/kube-x-helm-values.yml"

  envsubst < "$KUBE_X_HELM_VALUES" >| "$SHM_HELM_VALUES"
  echo "$SHM_HELM_VALUES"

}

apply(){

  MODE=${1:-}
  if [ "$MODE" == "" ]; then
    echo::err "Internal error: A mode is mandatory as first argument (install or template)"
    return 1
  fi

  APP_NAME="${2:-}"
  if [ "$APP_NAME" == "" ]; then
    echo::err "An app name is mandatory as second argument"
    return 1
  fi


  read -r APP_NAMESPACE APP_NAME <<< "$(kube::get_qualified_app_name "$APP_NAME")"
  echo "$APP_NAMESPACE $APP_NAME"

  # Crds first
  # CRD first installation is becoming a standard
  # Example with Prometheus: https://github.com/prometheus-operator/kube-prometheus#quickstart
  # They create the namespace and CustomResourceDefinitions first
  # to avoid race conditions when deploying the components.
  #
  # We could also do
  #```bash
  # kubectl apply --server-side --force-conflicts -f https://github.com/grafana/grafana-operator/releases/download/v5.15.1/crds.yaml
  #```
  if APP_CRDS_DIRECTORY=$(kube::get_app_crds_directory "$APP_NAMESPACE"); then
    echo::debug "App Crd Directory: $APP_CRDS_DIRECTORY"
    APP_RELEASE_CRDS_NAME="$APP_NAMESPACE-crds"
    CHART_APP_VERSION=$(yq '.appVersion' Chart.yaml)
    if ! kube::is_helm_chart_installed "$APP_RELEASE_CRDS_NAME" "$APP_NAMESPACE" "$CHART_APP_VERSION"; then

      command::echo_eval "helm upgrade --install -n $APP_NAMESPACE --create-namespace $APP_RELEASE_CRDS_NAME $APP_CRDS_DIRECTORY"

      # Wait
      echo::info "Waiting until all CRD are established in the namespace $APP_NAMESPACE"
      kubectl wait \
      	--for condition=Established \
      	--all CustomResourceDefinition \
      	--namespace="$APP_NAMESPACE"

    else
      echo::info "Chart $APP_RELEASE_CRDS_NAME already installed"
    fi
  fi

  # App
  APP_DIRECTORY=$(kube::get_app_directory "$APP_NAMESPACE")

  # To update the kube-x helm
  command::echo_eval "helm dependency update $APP_DIRECTORY"

  APP_RELEASE_NAME="$APP_NAMESPACE"

  local HELM_INSTALL_COMMAND=("helm")

  case "$MODE" in
      "install")
        HELM_INSTALL_COMMAND+=( "upgrade" "--install" )
        ;;
      "template")
        HELM_INSTALL_COMMAND+=( "template" )
        ;;
      *)
        echo::err "The mode $MODE is unknown"
        return 1
        ;;
  esac


  HELM_INSTALL_COMMAND+=(
    "-n" "$APP_NAMESPACE"
    "--create-namespace"
    "--dependency-update"
    )

  # The kube-x values
  if ! KUBE_X_VALUES_PATH=$(generate_and_get_values_path); then
    echo::err "Error while trying to get the kube-x-helm values"
    return 1
  fi
  HELM_INSTALL_COMMAND+=("-f" "${KUBE_X_VALUES_PATH}")

  if [ "${KUBE_X_HELM_INSTALL_OPTIONS:-}" != "" ]; then
    HELM_INSTALL_COMMAND+=("${KUBE_X_HELM_INSTALL_OPTIONS[@]}")
  fi

  # Get env (KubeConfig)
  KUBECTX_ENV=$(source kubectl-xenv) || error::exit $?
  eval "$KUBECTX_ENV"

  # Post renderer
  HELM_INSTALL_COMMAND+=(
    "--post-renderer" "kube-x-helm-post-renderer"
    "--post-renderer-args" "$APP_DIRECTORY"
    )

  # --dependency-update flag to avoid the `helm dependency build` error:
  # `Error: no repository definition for https://traefik.github.io/charts. Please add the missing repos via 'helm repo add'`
  # See https://github.com/helm/helm/issues/7214
  # values.yaml file is taken by default
  HELM_INSTALL_COMMAND+=("$APP_RELEASE_NAME" "$APP_DIRECTORY")

  # Working directory is the cluster directory
  # Why? To be able to set relative path to the cluster object such as certificate
  # example: "--set-file kube_x.traefik.defaultCertificate.cert=cert/kube-x.dev+1.pem"
  pushd "$KUBE_X_CLUSTER_DIR"
  command::echo_eval "${HELM_INSTALL_COMMAND[*]}"
  echo::info "${HELM_INSTALL_COMMAND[*]}"
  popd

  # Wait?
  # kubectl wait --for=condition=Ready pods -l  app.kubernetes.io/name=prometheus-operator

}


# The synopsis function is required by the doc::usage
synopsis(){

  cat << 'EOF'
```bash
kube-x-cluster-app [-c|--cluster clusterName] command options
```

where `command` can be:

* 'install'  - Install an app managed by helm (with optional Jsonnet Manifests and kustomization)
* 'template' - Output the manifests for an app (used for ArgoCd Integration and debugging)
* 'values'  - Shows the values


EOF

}

##########################
## Collect the options
##########################
args=$(getopt -l "cluster:" -o "c:" -- "$@")
# eval set to set the positional arguments back to $args
eval set -- "$args"
KUBE_X_CLUSTER_NAME=${KUBE_X_CLUSTER_NAME:-}
while [[ $# -gt 0 ]]
do
   case "$1" in
      "--cluster"|"-c")
        shift
        KUBE_X_CLUSTER_NAME=${1}
        shift
      ;;
      "--")
        shift
        break;
        # from now on, $@ contains only the arguments
        ;;
   esac
done

# Cluster Directory
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
  if [ "${KUBE_X_CLUSTER_NAME:-}" != "" ]; then
    KUBE_X_CLUSTER_DIR="${SCRIPT_DIR}/../resources/cluster/$KUBE_X_CLUSTER_NAME"
  else
    KUBE_X_CLUSTER_DIR=$PWD
  fi

# Envrc
# Used in all function
KUBE_X_ENV_FILE="${KUBE_X_CLUSTER_ENV_FILE:-"$KUBE_X_CLUSTER_DIR/.envrc"}"
if [ -f "$KUBE_X_ENV_FILE" ]; then
   echo::debug "Sourcing env file $KUBE_X_ENV_FILE"
   # shellcheck disable=SC1090
   if ! source "$KUBE_X_ENV_FILE"; then
     echo::err "Error while importing the envrc file $KUBE_X_ENV_FILE"
     return 1
   fi
fi

# Assign the first argument to a string
COMMAND=${1:-}
if [ "$COMMAND" = "" ]; then
    doc::help
    echo::err "A command is mandatory"
    exit 1
fi
# Help
if [[ "$COMMAND" =~ "-h"|"--help"|"help" ]]; then
  doc::help
  exit
fi
shift  # Remove the first argument from the argument list

case "$COMMAND" in
  "install")
     apply "$COMMAND" "$@" || error::exit $?
    ;;
  "template")
     apply "$COMMAND" "$@" || error::exit $?
    ;;
  "synopsis")
    synopsis
    ;;
  "values")
    yq "$(generate_and_get_values_path)"
    ;;
  *)
    doc::help synopsis
    echo::err  "Command $COMMAND is unknown"
    exit 1
esac
