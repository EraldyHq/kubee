#!/bin/bash




# shellcheck source=./bashlib-doc.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-doc.sh"



synopsis(){

cat <<EOF

Get a shell into your application pod or your cluster with busybox

\`\`\`bash
kubee app shell [--shell|-s shellName] <app name>
\`\`\`

where:

* \`app name\` may be:
    * an app name
    * or \`busybox\` to run a standalone busybox pod
* \`--shell|-s shell name\` may be:'
  * a shell path (ie \`bash\`, \`sh\`, \`bin/bash\`)
  * or \`ephemeral\` to add busybox as an ephemeral container if your container app has no shell

Note: the Kubernetes app will run the busybox pod.
EOF
}

######################
# Main
######################

if [[ "${1:-}" == "synopsis" ]]; then
  synopsis
  exit
fi

# Set
KUBEE_APP_NAME=""
SHELL_NAME=""

# Normalization
# A shell option with an option argument
args=$(getopt --longoptions "shell:,help"  --options "s:h"  -- "$@")
# eval set to set the positional arguments back to $args
eval set -- "$args"

export KUBEE_CONNECTION_NAMESPACE
# Loop
while [[ $# -gt 0 ]]
do
   case "$1" in
    "--shell"|"-s")
      shift
      SHELL_NAME=$1
      shift;
    ;;
    "-h"|"--help")
      doc::help synopsis
      exit
    ;;
    --)
      # Starts argument
      shift
      ;;
    *)
      KUBEE_APP_NAME=$1
      shift
      ;;
  esac
done

# This is a kubectl tool
# Set the kubeconfig
kubee::set_kubeconfig_env


# Set the known default shell
if [ "$SHELL_NAME" == "" ]; then
  case "$KUBEE_APP_NAME" in
    "prometheus"|"vault"|"pushgateway")
      SHELL_NAME=/bin/sh;
      ;;
    *)
      SHELL_NAME=/bin/bash
    ;;
  esac
fi


# Busy box and kubernetes are a special kind of app
# That does have any pod or directory
# Busybox is not a real app
if [ "$KUBEE_APP_NAME" == "busybox" ] || [ "$KUBEE_APP_NAME" == "kubernetes" ]; then

    echo::info "Starting busybox ${KUBEE_BUSYBOX_IMAGE} in the namespace ${KUBEE_CONNECTION_NAMESPACE}"
    # --image-pull-policy Always will download it every time
    # Making it work with latest
    kubectl run -it busybox-pod --image="$KUBEE_BUSYBOX_IMAGE" --restart=Never --rm --image-pull-policy Always
    exit 0

fi



echo::info "Getting Pod Name and Namespace for app $KUBEE_APP_NAME"

read -r POD_NAME POD_NAMESPACE <<< "$(kubee::get_resource_by_app_name "$KUBEE_APP_NAME" pod)"
if [ "$POD_NAME" == "" ]; then
    echo::err "Pod not found with label $(kubee::get_app_label "$KUBEE_APP_NAME")"
    exit 1
fi

echo::info "Pod Name: $POD_NAME"
echo::info "Pod Namespace: $POD_NAMESPACE"

if [ "$SHELL_NAME" == "ephemeral" ]; then
  # https://kubernetes.io/docs/tasks/debug/debug-application/debug-running-pod/#ephemeral-container-example
  echo::info "Starting a ephemeral busybox shell on the pod $POD_NAMESPACE/$POD_NAME"
  TARGET_CONTAINER_NAME="todo"
  kubectl debug -it  --image="$BUSY_BOX_IMAGE" -n "$POD_NAMESPACE" --target="$TARGET_CONTAINER_NAME" "$POD_NAME"
  exit 0
fi

echo::info "Starting the shell $SHELL_NAME on the pod $POD_NAMESPACE/$POD_NAME"
# Note: -c ${CONTAINER_NAME} is mandatory for pods that have more than a single container.
kubectl exec -it "$POD_NAME" -n "$POD_NAMESPACE" -- "$SHELL_NAME"