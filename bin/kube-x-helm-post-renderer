#!/bin/bash
# A post renderer to integrate kustomize and jsonnet
set -TCEeuo pipefail
# shellcheck source=../..//bash-lib/lib/bashlib-error.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-error.sh"
error::set_trap
# shellcheck source=../../bash-lib/lib/bashlib-echo.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-echo.sh"
# shellcheck source=../../bash-lib/lib/bashlib-doc.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-doc.sh"

APP_DIRECTORY="${1:-}"

if [[ "$APP_DIRECTORY" =~ "synopsis"|"help" ]]; then
  echo "A post renderer to integrate kustomize and jsonnet"
  echo ""
  echo "$(basename "$0") appDirectory clusterDirectory"
  echo ""
  echo "where:"
  echo "  appDirectory: is the directory of the app to install"
  echo ""
  echo "Note: the Helm templates are passed in stdin"
  echo "See https://helm.sh/docs/topics/advanced/#post-rendering"
  exit 0
fi

if [ ! -d "$APP_DIRECTORY" ]; then
  echo::err "Internal Error: the first argument app directory ($APP_DIRECTORY) is not a valid directory"
  exit 1
fi

CLUSTER_DIRECTORY=$PWD
VALUES_PATH="$CLUSTER_DIRECTORY/values.yaml"
if [ ! -f "$VALUES_PATH" ]; then
  echo::err "The values file ($VALUES_PATH) does not exist"
  exit 1
fi

# Grab the manifests passed by Helm
HELM_MANIFEST=$(cat)

# Add JsonNet template if any
PROMETHEUS_RULE_FILE="jsonnet/prometheusRule.jsonnet"
PROMETHEUS_RULE_FILE_QUALIFIED="$APP_DIRECTORY/$PROMETHEUS_RULE_FILE"
if [ -f "$PROMETHEUS_RULE_FILE_QUALIFIED" ]; then

  # Run
  MIXIN_MANIFEST=$(
    pushd "$APP_DIRECTORY" > /dev/null
    # Update the dependencies (vendor directory)
    JPATH="vendor"
    if [ ! -d "$APP_DIRECTORY/$JPATH" ]; then
      jb update
    fi
    # --string: string as output
    jsonnet \
      --jpath "$JPATH" \
      --string \
      --ext-code "values=std.parseYaml(importstr \"$VALUES_PATH\")" \
      --exec "std.manifestYamlDoc((import \"$PROMETHEUS_RULE_FILE\"))"
    popd > /dev/null
  )

  # Add the jsonnet manifest
  HELM_MANIFEST=$(cat <<EOF
$HELM_MANIFEST
---
$MIXIN_MANIFEST
EOF
)

fi

# Kustomize
# Example:
# https://github.com/thomastaylor312/advanced-helm-demos/tree/master/post-render
KUSTOMIZATION_FILE="kustomization.yaml"
if [ -f "$KUSTOMIZATION_FILE" ]; then
  pushd "$APP_DIRECTORY" > /dev/null
  echo "$HELM_MANIFEST" > all.yaml
  # kustomize should be installed in the PATH
  # a kustomization.yaml file should be present that adds the resource `all.yaml`
  kustomize build . && rm all.yaml
  popd > /dev/null
  exit 0
fi

# No Kustomize, output the manifest without kustomization
echo "$HELM_MANIFEST"
