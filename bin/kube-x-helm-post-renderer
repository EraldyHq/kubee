#!/bin/bash
# A post renderer to integrate kustomize and jsonnet
# shellcheck source=../..//bash-lib/lib/bashlib-error.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-error.sh"
error::set_trap
set -TCEeuo pipefail
# shellcheck source=../../bash-lib/lib/bashlib-echo.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-echo.sh"
# shellcheck source=../../bash-lib/lib/bashlib-doc.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-doc.sh"
# shellcheck source=../../bash-lib/lib/bashlib-bash.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-bash.sh"
# shellcheck source=../../bash-lib/lib/bashlib-command.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-command.sh"
# shellcheck source=kube-x-lib.sh
source kube-x-lib.sh

APP_DIRECTORY="${1:-}"

if [[ "$APP_DIRECTORY" =~ "synopsis"|"help" ]]; then
  echo "A post renderer to integrate kustomize and jsonnet"
  echo ""
  echo "$(basename "$0") appDirectory valuesPath"
  echo ""
  echo "where:"
  echo "  appDirectory: is the directory of the app to install"
  echo "  valuesPath: is the path to the values file"
  echo ""
  echo "Note: the Helm templates are passed via stdin"
  echo "See https://helm.sh/docs/topics/advanced/#post-rendering"
  exit 0
fi

if [ ! -d "$APP_DIRECTORY" ]; then
  echo::err "Internal Error: the first argument app directory ($APP_DIRECTORY) is not a valid directory"
  exit 1
fi

# Values path is already generated at this point
# that's why we pass it and not regenerate it
VALUES_PATH="${2:-}"
if [ ! -f "$VALUES_PATH" ]; then
  echo::err "Internal Error: the second argument values path ($VALUES_PATH) is not a valid file"
  exit 1
fi


# The whole script run in the app directory
pushd "$APP_DIRECTORY" > /dev/null
bash::trap 'popd >/dev/null' EXIT # EXIT execute also on error

# Grab the manifests passed by Helm
HELM_MANIFEST=$(cat)

##################
# JsonNet
##################
# Processing any JsonNet template if any
JSONNET_DIR="jsonnet"
if [ -d "$JSONNET_DIR" ]; then

  echo::info "Jsonnet processing"

  # Update the dependencies (vendor directory)
  JPATH="vendor"
  JSONNET_FILE="jsonnetfile.json"
  if [ ! -d "$JPATH" ] && [ -f "$JSONNET_FILE" ]; then
    jb update
  fi


  for JSONNET_FILE in jsonnet/*.jsonnet; do

    echo::info "Processing $JSONNET_FILE"

    # Run
    MIXIN_MANIFEST=$(
      # --string: string as output
      jsonnet \
        --jpath "$JPATH" \
        --string \
        --ext-code "values=std.parseYaml(importstr \"$VALUES_PATH\")" \
        --exec "std.manifestYamlDoc((import \"$JSONNET_FILE\"))"
    )

    # Add the jsonnet manifest
    HELM_MANIFEST=$(cat <<EOF
$HELM_MANIFEST
---
# Source: $JSONNET_FILE
$MIXIN_MANIFEST
EOF
)

  done

else
  echo::info "No Jsonnet directory found"
fi

# Kustomize
# Example:
# https://github.com/thomastaylor312/advanced-helm-demos/tree/master/post-render
KUSTOMIZATION_FILE=$(realpath "kustomization.yml")
if [ -f "$KUSTOMIZATION_FILE" ]; then
  echo::info "Kustomization processing (File: $KUSTOMIZATION_FILE)"
  HELM_FILE="helx.yml"
  CONTAINS_HELM_FILE=$(yq ".resources | contains([\"$HELM_FILE\"])" "$KUSTOMIZATION_FILE")
  if [ "$CONTAINS_HELM_FILE" == "false" ]; then
    echo::err "The kustomization file should contain the generated file ($HELM_FILE) in the resources list"
    exit 1
  fi
  echo "$HELM_MANIFEST" >| "$HELM_FILE"
  # kubectl should be installed in the PATH
  # kustomize build .
  if HELM_MANIFEST=$(kubectl kustomize .); then
    # most errors comes from the generation, we don't delete the file then on error
    rm "$APP_DIRECTORY/$HELM_FILE"
  else
    echo::err "An error occurred during the kustomization"
    echo::err "The command 'kubectl kustomize .' failed"
    exit 1
  fi
else
  # No Kustomize, output the manifest without kustomization
  echo::info "No kustomization file ($KUSTOMIZATION_FILE)"
fi

echo "$HELM_MANIFEST"