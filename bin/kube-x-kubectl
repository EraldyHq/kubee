#!/bin/bash

# shellcheck source=./bashlib-error.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-error.sh"
error::set_strict_mode
error::set_trap
# shellcheck source=./bashlib-echo.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-echo.sh"
# shellcheck source=./bashlib-doc.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-doc.sh"

# @description test the connection to the cluster
test_connection(){

  if OUTPUT=$(kubectl cluster-info); then
    echo::info "Test Connection succeeded"
    return 0;
  fi
  echo::err "No connection could be made with the cluster"


  if [ "${KUBECONFIG:-}" == "" ]; then
        echo::err "Note: No KUBECONFIG env found"
  else
      if [ ! -f "$KUBECONFIG" ]; then
        echo::err "The KUBECONFIG env file ($KUBECONFIG) does not exist"
      else
        echo::info "The file ($KUBECONFIG) may have bad cluster info"
        echo::err "Note: The config is:"
        kubectl config view
      fi
  fi


  echo::err "We got the following output from the connection"
  echo::err "$OUTPUT"
  return 1

}

synopsis(){
  cat <<EOF
\`\`\`bash
$(basename "$0") [-n|--namespace namespaceName] [kubectl args]
\`\`\`

where:

* \`-n|--namespace\` specifies the \`namespace\` default to \`KUBE_X_APP_NAMESPACE\` or \`KUBE_X_DEFAULT_NAMESPACE\` and ultimately to \`default\`.

EOF
}

if [ "${1:-}" == "synopsis" ]; then
  synopsis
  exit
fi

args=()

KUBE_X_APP_NAMESPACE=${KUBE_X_APP_NAMESPACE:-}
while [[ $# -gt 0 ]]
do
   case  "$1" in
    -n|--namespace)
      shift
      if [ "${1:-}" == "" ]; then
        echo::err "The -n or --namespace flag expects a value"
        exit 1
      fi
      KUBE_X_APP_NAMESPACE="$1"
      ;;
    --all-namespaces)
      # The created kubeconfig needs a namespace
      # In a all-namespace query we set it to default
      KUBE_X_APP_NAMESPACE="default"
      args+=("$1")
      ;;
    *)
      args+=("$1")
      ;;
   esac
   shift
done



# Get env
KUBECTX_ENV=$(source kubectl-xenv) || error::exit $?
eval "$KUBECTX_ENV"




###########################
# Connection test
###########################
# We test the connection because otherwise the user
# may get a message that a resource could not be found
# where the culprit should have been the connection
# Test Connection
# Debug
if [ "$BASHLIB_ECHO_LEVEL" == "$BASHLIB_ECHO_DEBUG_LEVEL" ]; then
  test_connection
fi


kubectl "${args[@]}"