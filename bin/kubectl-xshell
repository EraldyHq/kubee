#!/bin/bash


# shellcheck source=./bashlib-error.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-error.sh"
error::set_strict_mode
error::set_trap
# shellcheck source=./bashlib-echo.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-echo.sh"
# shellcheck source=./bashlib-doc.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-doc.sh"
# shellcheck source=./bashlib-bash.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-bash.sh"
# shellcheck source=./bashlib-kube.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-kube.sh"



synopsis(){

cat <<EOF

Get a shell into your application pod or your cluster with busybox

\`\`\`bash
$(basename "$0") [--shell|-s shellName [--namespace|-n namespace] <app name>
\`\`\`

where:

* \`app name\` (Default to \`KUBE_X_APP_NAME\`) may be:
    * an app name (used with the label \`app.kubernetes.io/name=<app name>\` to select the target pod)
    * or \`busybox\` to run a standalone busybox pod
* \`--shell|-s shell name\` may be:'
  * a shell path (ie \`bash\`, \`sh\`, \`bin/bash\`)
  * or \`ephemeral\` to add busybox as an ephemeral container if your container app has no shell
* \`--namespace|-n namespace\` to override the default namespace
EOF
}

######################
# Main
######################

if [[ "${1:-}" == "synopsis" ]]; then
  synopsis
  exit
fi

# Set
KUBE_X_APP_NAME=""
SHELL_NAME=""

# Normalization
# A shell option with an option argument
args=$(getopt --longoptions "shell:,help,namespace"  --options "s:hn"  -- "$@")
# eval set to set the positional arguments back to $args
eval set -- "$args"

export KUBE_X_NAMESPACE
# Loop
while [[ $# -gt 0 ]]
do
   case "$1" in
    "--shell"|"-s")
      shift
      SHELL_NAME=$1
      shift;
    ;;
    "-h"|"--help")
      doc::help synopsis
      exit
    ;;
    "-n"|"--namespace")
      shift
      KUBE_X_NAMESPACE="$1"
      shift
    ;;
    --)
      # Starts argument
      shift
      ;;
    *)
      KUBE_X_APP_NAME=$1
      shift
      ;;
  esac
done



# Set the known default shell
if [ "$SHELL_NAME" == "" ]; then
  case "$KUBE_X_APP_NAME" in
    "prometheus"|"vault")
      SHELL_NAME=/bin/sh;
      ;;
    *)
      SHELL_NAME=/bin/bash
    ;;
  esac
fi

# Busy box is a special kind of app
# That does have any pod or directory
if [ "$KUBE_X_APP_NAME" == "busybox" ]; then

    KUBE_X_BUSY_BOX_IMAGE="alpine/curl:8.9.1"
    # KUBE_X_BUSY_BOX_IMAGE=busybox:1.36.1
    # https://busybox.net/ is a
    # lightweight GNU environment any small or embedded system
    # where a subsets of the clients are reimplemented
    # Example: wget: https://git.busybox.net/busybox/tree/networking/wget.c?h=1_32_stable
    # Busybox does not have curl
    #
    # A solution is to use alpine instead
    # It's busybox + a minimal package manager and libc implementation such that you can trivially do
    # `apk add --no-cache curl`
    # https://github.com/docker-library/busybox/issues/47

    # Env for BusyBox
    KUBE_X_NAMESPACE=${KUBE_X_NAMESPACE:-"default"}
    KUBE_X_KUBECTL=${KUBE_X_KUBECTL:-"kubectl"}
    echo::info "Starting busybox in the namespace ${KUBE_X_NAMESPACE}"
    $KUBE_X_KUBECTL run -it busybox-pod --image=$KUBE_X_BUSY_BOX_IMAGE --restart=Never --rm
    exit 0
fi

# Set the env
# The substitution is not in the eval because bash would not stop the script otherwise
KUBE_X_ENV=$(kubectl-xenv "$KUBE_X_APP_NAME") || exit $?
eval "$KUBE_X_ENV"

echo::info "Getting Pod Name and Namespace for app $KUBE_X_APP_NAME"

read -r POD_NAME POD_NAMESPACE <<< "$(kube::get_resource_by_app_name "$KUBE_X_APP_NAME" pod)"
if [ "$POD_NAME" == "" ]; then
    echo::err "Pod not found with label $(kube::get_app_label "$KUBE_X_APP_NAME")"
    exit 1
fi

echo::info "Pod Name: $POD_NAME"
echo::info "Pod Namespace: $POD_NAMESPACE"

if [ "$SHELL_NAME" == "ephemeral" ]; then
  echo::info "Starting a ephemeral busybox shell on the pod $POD_NAMESPACE/$POD_NAME"
  $KUBE_X_KUBECTL debug -it --image=$BUSY_BOX_IMAGE -n "$POD_NAMESPACE" --target="$POD_NAME" ephemeral-shell
  exit 0
fi

echo::info "Starting the shell $SHELL_NAME on the pod $POD_NAMESPACE/$POD_NAME"
# Note: -c ${CONTAINER_NAME} is mandatory for pods that have more than a single container.
$KUBE_X_KUBECTL exec -it "$POD_NAME" -n "$POD_NAMESPACE" -- "$SHELL_NAME"