#!/bin/bash
# @name kube-app-env
# @description
#   Print the export environment statement for the app
#
#   Used in a direnv setup


# shellcheck source=./bashlib-error.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-error.sh"
error::set_strict_mode
error::set_trap
# shellcheck source=./bashlib-echo.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-echo.sh"
# shellcheck source=./bashlib-doc.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-doc.sh"
# shellcheck source=./bashlib-path.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-path.sh"
# shellcheck source=./bashlib-bash.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-bash.sh"
# shellcheck source=./bashlib-command.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-command.sh"



synopsis(){

cat <<EOF
Print the kubernetes and kube-x environment variables in a export format
\`\`\`bash
$(basename "$0") [<app name>]
\`\`\`

where \`app name\` is optional if the current directory is below the \`KUBE_X_APP_HOME\`.

EOF

}


######################
# Main
######################

KUBE_X_APP_NAME=${1:-}


# Synopsis
if [[ "$KUBE_X_APP_NAME" = "synopsis" ]]; then
  synopsis
  exit 0
fi

# Help ?
if [[ "$KUBE_X_APP_NAME" =~ -h|--help|help ]]; then
  doc::help synopsis
  exit 0
fi

###########################
# Kube App home
###########################
if [ "${KUBE_X_APP_HOME:-}" == "" ]; then
  echo::err "The KUBE_X_APP_HOME environment variable is mandatory and was not found"
  echo::err "Add it in your bashrc or OS environment variables"
  exit 1
fi


###########################
# App Name
###########################
if [ "$KUBE_X_APP_NAME" == "" ]; then
  # Check if we are under a KUBE_X_APP_HOME app home dir
  IFS=":"; for KUBE_X_HOME in $KUBE_X_APP_HOME; do
      if [ ! -d "$KUBE_X_HOME" ]; then
        echo::warn "The HOME path ($KUBE_X_HOME) set in KUBE_X_APP_HOME does not exist or is not a directory"
        continue
      fi
      KUBE_X_APP_NAME=$(path::relative_to "$PWD" "$KUBE_X_HOME") || continue
      break
  done
#  if [ "$KUBE_X_APP_NAME" == "" ]; then
#      echo::err "App name could not be determined."
#      echo::err "* No app name was passed as parameter"
#      echo::err "* The working directory ($PWD) is not under a KUBE_X_APP_HOME path ($KUBE_X_APP_HOME)"
#  fi
fi
echo ""
echo "# The name of the app"
echo "KUBE_X_APP_NAME=$KUBE_X_APP_NAME"


###########################
# App dir and envrc: Load the user env
###########################
KUBE_X_APP_DIR=""
if [ "$KUBE_X_APP_NAME" != "" ]; then

  IFS=":"; for KUBE_X_HOME in $KUBE_X_APP_HOME; do
    APP_DIR=$KUBE_X_HOME/$KUBE_X_APP_NAME
    if [ -d "$APP_DIR" ]; then
      KUBE_X_APP_DIR="$APP_DIR"
      break
    fi
  done

  if [ "$KUBE_X_APP_DIR" == "" ]; then
    # App Name may be a component (example: alert manager)
    echo::warn "No sub-directory with the name $KUBE_X_APP_NAME was found under the KUBE_X_APP_HOME paths ($KUBE_X_APP_HOME)"
  else
    # App specific env
    # Should be first
    # Go to the app dir and pop at err and exit
    pushd "$KUBE_X_APP_DIR" >/dev/null || return 1
    bash::trap 'popd >/dev/null' EXIT # EXIT execute also on error

    # Load the env
    if command::exists "direnv"; then
        # Direnv should be explicitly called in non-interactive mode
        # https://github.com/direnv/direnv/issues/262
        if ! bash::is_interactive; then
          eval "$(direnv export bash)"
        fi
    else
      echo::warn "Direnv not found on path"
      ENVRC_FILE="$KUBE_X_APP_DIR/.envrc"
      if [ -f "$ENVRC_FILE" ]; then
        # shellcheck disable=SC1090
        source "$ENVRC_FILE"
      else
        echo::warn "File $ENVRC_FILE not found"
      fi
    fi

  fi

fi
echo ""
echo "# The directory of the app"
echo "KUBE_X_APP_DIR=$KUBE_X_APP_DIR"



#############################
# All env with default value
# Should be after app envrc call
#############################

# App Namespace
echo ""
echo "# The namespace of the app"
KUBE_X_APP_NAMESPACE=${KUBE_X_APP_NAMESPACE:-"$KUBE_X_APP_NAME"}
echo "KUBE_X_APP_NAMESPACE=$KUBE_X_APP_NAMESPACE"


## Default namespace
echo ""
echo "# The default namespace for the connection"
KUBE_X_DEFAULT_NAMESPACE=${KUBE_X_DEFAULT_NAMESPACE:-default}
echo "KUBE_X_DEFAULT_NAMESPACE=${KUBE_X_DEFAULT_NAMESPACE}"

## Derived
echo ""
echo "# The namespace for the connection (in the kubectx kubeconfig context)"
KUBE_X_CONNECTION_NAMESPACE=${KUBE_X_APP_NAMESPACE:-$KUBE_X_DEFAULT_NAMESPACE}
echo "KUBE_X_CONNECTION_NAMESPACE=${KUBE_X_CONNECTION_NAMESPACE}"

# The user
echo ""
echo "# The username for the connection (in the kubectx kubeconfig context)"
KUBE_X_USER=${KUBE_X_USER:-"default"}
echo "KUBE_X_USER=$KUBE_X_USER"

# The cluster
echo ""
echo "# The cluster name for the connection (in the kubectx kubeconfig context)"
KUBE_X_CLUSTER=${KUBE_X_CLUSTER:-"default"}
echo "KUBE_X_CLUSTER=$KUBE_X_CLUSTER"

# The context name
echo ""
echo "# The name of the context (in kubectx kubeconfig)"
KUBE_X_CONTEXT_NAME=${KUBE_X_CONTEXT_NAME:-"$KUBE_X_USER@$KUBE_X_CLUSTER/$KUBE_X_CONNECTION_NAMESPACE"}
echo "KUBE_X_CONTEXT_NAME=$KUBE_X_CONTEXT_NAME"

# The pass home
echo ""
echo "# The directory for the kubeconfig data in the pass store manager"
KUBE_X_PASS_HOME=${KUBE_X_PASS_HOME:-"kube-x"}
echo "KUBE_X_PASS_HOME=$KUBE_X_PASS_HOME"

# Busybox
echo ""
echo "# The busybox image to use for a shell in a busybox or ephemeral container"
KUBE_X_BUSYBOX_IMAGE=${KUBE_X_BUSYBOX_IMAGE:-ghcr.io/gerardnico/busybox:latest}
echo "KUBE_X_BUSYBOX_IMAGE=$KUBE_X_BUSYBOX_IMAGE"

# Config does not work with process substitution (ie /dev/
# It seems that it starts another process deleting/closing the file descriptor
touch /dev/shm/kube-x-config
# Trap work exit  also on source
# https://stackoverflow.com/questions/69614179/bash-trap-not-working-when-script-is-sourced
# As what we want is to delete it after the main script
# We just output the trap statement
echo 'trap "rm /dev/shm/kube-x-config" EXIT'
chmod 0600 /dev/shm/kube-x-config
source kube-x-config.sh >| /dev/shm/kube-x-config
echo "export KUBECONFIG=/dev/shm/kube-x-config"
