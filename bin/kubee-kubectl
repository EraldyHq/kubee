#!/bin/bash

# shellcheck source=./bashlib-error.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-error.sh"
error::set_strict_mode
error::set_trap
# shellcheck source=./bashlib-echo.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-echo.sh"
# shellcheck source=./bashlib-doc.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-doc.sh"
source "kubee-lib.sh"



synopsis(){
  cat <<EOF
\`\`\`bash
$(basename "$0") [kubee options]  [kubectl args]
\`\`\`

where:

* \`kubee options\` are:
  * \`-n|--namespace name\`    : the \`connection namespace name\` default to \`KUBEE_CONNECTION_NAMESPACE\`, ultimately to \`default\`.
  * \`-c|--cluster   name\`    : the \`cluster name\` default to \`KUBEE_CLUSTER_NAME\`. Mandatory if there was no \`KUBECONFIG\` found.
  * \`--debug\`                : Print debug statements.

* \`kubectl args\` are kubectl arguments

Example:
* Execute the kubectl \`cluster-info\` command against the cluster
\`\`\`bash
$(basename "$0") -c my-kubee cluster-info
\`\`\`

EOF
}

if [ "${1:-}" == "synopsis" ]; then
  synopsis
  exit
fi

args=()

KUBEE_CONNECTION_NAMESPACE=${KUBEE_CONNECTION_NAMESPACE:-"default"}
KUBEE_CLUSTER_NAME=${KUBEE_CLUSTER_NAME:-}
while [[ $# -gt 0 ]]
do
   case  "$1" in
    -n|--namespace)
      shift
      if [ "${1:-}" == "" ]; then
        echo::err "The -n or --namespace flag expects a value"
        exit 1
      fi
      KUBEE_CONNECTION_NAMESPACE="$1"
      ;;
    -c|--cluster)
      shift
      KUBEE_CLUSTER_NAME="$1"
      ;;
    "--debug")
      export BASHLIB_ECHO_LEVEL="$BASHLIB_ECHO_DEBUG_LEVEL";
      ;;
    *)
      args+=("$1")
      ;;
   esac
   shift
done


# Get env
source kubee-env || error::exit $?


###########################
# Connection test
###########################
# We test the connection because otherwise the user
# may get a message that a resource could not be found
# where the culprit should have been the connection
# Test Connection
# Debug
if [ "$BASHLIB_ECHO_LEVEL" == "$BASHLIB_ECHO_DEBUG_LEVEL" ]; then
  kube::test_connection
fi


kubectl "${args[@]}"