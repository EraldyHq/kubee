#!/usr/bin/env bash

# shellcheck source=../..//bash-lib/lib/bashlib-error.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-error.sh"
error::set_strict_mode
error::set_trap
# shellcheck source=../../bash-lib/lib/bashlib-doc.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-doc.sh"
# shellcheck source=../../bash-lib/lib/bashlib-echo.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-echo.sh"
# shellcheck source=../../bash-lib/lib/bashlib-bash.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-bash.sh"
# shellcheck source=./kubee-lib.sh
source "kubee-lib.sh"

synopsis(){
  cat <<EOF
\`\`\`bash
$(basename "$0") [kubee options] command args
\`\`\`

where:

* \`command\` is one of:
  * \`app\`                      : App Commands (based on the app label)
  * \`cert\`                     : Cert commands
  * \`kubectl\`                  : Kubectl Kubee scluster aware
  * \`helmet\`                   : Kubee Package Manager
  * \`helm\`                     : Helm Package Manager

* \`kubee options\` are:
  * \`-n|--namespace name\`    : the \`connection namespace name\` default to \`KUBEE_CONNECTION_NAMESPACE\`, ultimately to \`default\`.
  * \`-c|--cluster   name\`    : the \`cluster name\` default to \`KUBEE_CLUSTER_NAME\`.
  * \`--debug\`                : Print debug statements.
  * \`--print-commands\`       : Print the command statements.


Example:
* Execute the kubectl \`cluster-info\` command against the cluster
\`\`\`bash
$(basename "$0") -c my-kubee kubectl cluster-info
\`\`\`

EOF
}

if [ "${1:-}" == "synopsis" ]; then
   synopsis
   exit
fi

# Connection variables
export KUBEE_CONNECTION_NAMESPACE=${KUBEE_CONNECTION_NAMESPACE:-"default"}
export KUBEE_CLUSTER_NAME=${KUBEE_CLUSTER_NAME:-}
# Echo variables
# COMMAND_STDOUT_FD is where the stdout, stderr of executed command should go,
# exported because it's used also in the helm post-renderer
# default to null and is set to stderr or tty for debug level
export COMMAND_STDOUT_FD="/dev/null"
# Default level
export BASHLIB_ECHO_LEVEL=$BASHLIB_ECHO_INFO_LEVEL


# Parsing
# Note: getopt cannot be used because of : unrecognized --out option. This is an option of a sub-command
# Example:
# this command : `getopt -l "cluster:,debug,namespace:,print-commands" -o "c:n:" -- "$@"`
# will fail with: `kubee helmet template kubernetes-monitoring --out`
KUBEE_COMMAND=""
while [[ $# -gt 0 ]]
do
   case  "$1" in
    -n|--namespace)
      shift
      if [ "${1:-}" == "" ]; then
        echo::err "The -n or --namespace flag expects a value"
        exit 1
      fi
      KUBEE_CONNECTION_NAMESPACE="$1"
      ;;
    -c|--cluster)
      shift
      KUBEE_CLUSTER_NAME="$1"
      ;;
    "--print-commands")
      BASHLIB_ECHO_LEVEL="$BASHLIB_ECHO_COMMAND_LEVEL";
      ;;
    "--debug")
      BASHLIB_ECHO_LEVEL="$BASHLIB_ECHO_DEBUG_LEVEL";
      COMMAND_STDOUT_FD=$(echo::get_file_descriptor);
      ;;
    *)
      echo::debug "Command ($1)"
      KUBEE_COMMAND=${1}
      shift
      break
      ;;
   esac
   shift
done


if [ "$KUBEE_COMMAND" = "" ]; then
    doc::help
    echo::err "A command is mandatory"
    exit 1
fi
# Help
if [[ "$KUBEE_COMMAND" =~ "-h"|"--help"|"help" ]]; then
  doc::help
  exit
fi

# Set the env
kubee::set_env

# Advertise the --debug flag if any error
# shellcheck disable=SC2016
bash::trap "exit_code=\$?; if [ \$exit_code -ne 0 ]; then echo -e \"${BASHLIB_ERROR_COLOR}Script failed use the global debug flag ie (kubee --debug $KUBEE_COMMAND) to get more information${NC}\"; fi" EXIT

case "$KUBEE_COMMAND" in
  "cluster")
     source kubee-cluster "$@" || error::exit $?
    ;;
  "app")
    source kubee-app "$@" || error::exit $?
    ;;
  "helmet")
    source kubee-helmet "$@"
    ;;
  "helm")
    source kubee-helm "$@" || error::exit $?
    ;;
  "kubectl")
    source kubee-kubectl "$@" || error::exit $?
    ;;
  "cert")
    source kubee-cert "$@" || error::exit $?
    ;;
  "jwt")
      source kubee-jwt "$@" || error::exit $?
      ;;
  *)
    doc::help synopsis
    echo::err  "Command $KUBEE_COMMAND is unknown"
    exit 1
esac

# Cleaning
if [ "$BASHLIB_ECHO_LEVEL" -gt "$BASHLIB_ECHO_COMMAND_LEVEL" ]; then
  echo::eval "echo 'Cleaning Shm' > $COMMAND_STDOUT_FD; rm -f /dev/shm/*"
fi
