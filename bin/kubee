#!/usr/bin/env bash

# shellcheck source=../..//bash-lib/lib/bashlib-error.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-error.sh"
error::set_strict_mode
error::set_trap
# shellcheck source=../..//bash-lib/lib/bashlib-echo.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-echo.sh"
# shellcheck source=../..//bash-lib/lib/bashlib-doc.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-doc.sh"




synopsis(){
  cat <<EOF
\`\`\`bash
$(basename "$0") [kubee options] command args
\`\`\`

where:

* \`kubee options\` are:
  * \`-n|--namespace name\`    : the \`connection namespace name\` default to \`KUBEE_CONNECTION_NAMESPACE\`, ultimately to \`default\`.
  * \`-c|--cluster   name\`    : the \`cluster name\` default to \`KUBEE_CLUSTER_NAME\`.
  * \`--debug\`                : Print debug statements.


Example:
* Execute the kubectl \`cluster-info\` command against the cluster
\`\`\`bash
$(basename "$0") -c my-kubee kubectl cluster-info
\`\`\`

EOF
}

if ! args=$(getopt -l "cluster:,debug,namespace:" -o "c:n:" -- "$@"); then
  doc::help
  exit 1
fi
# eval set to set the positional arguments back to $args
eval set -- "$args"

# Connection variables
export KUBEE_CONNECTION_NAMESPACE=${KUBEE_CONNECTION_NAMESPACE:-"default"}
export KUBEE_CLUSTER_NAME=${KUBEE_CLUSTER_NAME:-}
while [[ $# -gt 0 ]]
do
   case  "$1" in
    -n|--namespace)
      shift
      if [ "${1:-}" == "" ]; then
        echo::err "The -n or --namespace flag expects a value"
        exit 1
      fi
      KUBEE_CONNECTION_NAMESPACE="$1"
      ;;
    -c|--cluster)
      shift
      KUBEE_CLUSTER_NAME="$1"
      ;;
    "--debug")
      export BASHLIB_ECHO_LEVEL="$BASHLIB_ECHO_DEBUG_LEVEL";
      ;;
    "--")
      shift
      break;
      # from now on, $@ contains only the arguments
      ;;
    *)
      echo::err "Internal error: the option $1 was not processed"
      exit 1
      ;;
   esac
   shift
done

# Assign the first argument to a string
COMMAND=${1:-}
if [ "$COMMAND" = "" ]; then
    doc::help
    echo::err "A command is mandatory"
    exit 1
fi
# Help
if [[ "$COMMAND" =~ "-h"|"--help"|"help" ]]; then
  doc::help
  exit
fi
shift  # Remove the first argument from the argument list

case "$COMMAND" in
  "cluster")
     source kubee-cluster "$@" || error::exit $?
    ;;
  "synopsis")
    synopsis
    ;;
  *)
    doc::help synopsis
    echo::err  "Command $COMMAND is unknown"
    exit 1
esac
