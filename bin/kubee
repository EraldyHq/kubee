#!/usr/bin/env bash

# shellcheck source=../..//bash-lib/lib/bashlib-error.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-error.sh"
error::set_strict_mode
error::set_trap
# shellcheck source=../../bash-lib/lib/bashlib-doc.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-bash.sh"
# shellcheck source=../../bashlib-command.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-command.sh"
# shellcheck source=../../bash-lib/lib/bashlib-doc.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-doc.sh"
# shellcheck source=../../bash-lib/lib/bashlib-echo.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-echo.sh"
# shellcheck source=../../bashlib-error.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-error.sh"
# shellcheck source=../../bashlib-path.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-path.sh"
# shellcheck source=../../bash-lib/lib/bashlib-script.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-script.sh"
# shellcheck source=./kubee-lib.sh
source "kubee-lib.sh"




synopsis(){
  cat <<EOF
\`\`\`bash
$(basename "$0") [kubee options] command args
\`\`\`

where:

* \`command\` is one of:
  * \`cluster\`                  : Kubernetes cluster hosts installation and configuration
  * \`chart\`                    : Kubee Package Manager
  * \`app\`                      : Application scoped commands
  * \`kubectl\`                  : Kubectl Kubee scluster aware

* \`kubee options\` are:
  * \`-n|--namespace name\`    : the \`connection namespace name\` default to \`KUBEE_CONNECTION_NAMESPACE\`, ultimately to \`default\`.
  * \`-c|--cluster   name\`    : the \`cluster name\` default to \`KUBEE_CLUSTER_NAME\`.
  * \`--debug\`                : Print debug statements.
  * \`--print-commands\`       : Print the command statements.


Example:
* Execute the kubectl \`cluster-info\` command against the cluster
\`\`\`bash
$(basename "$0") -c my-kubee kubectl cluster-info
\`\`\`

EOF
}

if [ "${1:-}" == "synopsis" ]; then
   synopsis
   exit
fi

# Connection variables
export KUBEE_CONNECTION_NAMESPACE=${KUBEE_CONNECTION_NAMESPACE:-"default"}
export KUBEE_CLUSTER_NAME=${KUBEE_CLUSTER_NAME:-}
# Echo variables
# The destination of any std for an executed command
# default to null and is set to stderr or tty for debug level
export COMMAND_STDOUT_FD="/dev/null"


# Parsing
# Note: getopt cannot be used because of : unrecognized --out option. This is an option of a sub-command
# Example:
# this command : `getopt -l "cluster:,debug,namespace:,print-commands" -o "c:n:" -- "$@"`
# will fail with: `kubee chart template kubernetes-monitoring --out`
args=()
while [[ $# -gt 0 ]]
do
   case  "$1" in
    -n|--namespace)
      shift
      if [ "${1:-}" == "" ]; then
        echo::err "The -n or --namespace flag expects a value"
        exit 1
      fi
      KUBEE_CONNECTION_NAMESPACE="$1"
      ;;
    -c|--cluster)
      shift
      KUBEE_CLUSTER_NAME="$1"
      ;;
    "--print-commands")
      BASHLIB_ECHO_LEVEL="$BASHLIB_ECHO_COMMAND_LEVEL";
      ;;
    "--debug")
      BASHLIB_ECHO_LEVEL="$BASHLIB_ECHO_DEBUG_LEVEL";
      COMMAND_STDOUT_FD=$(echo::get_file_descriptor);
      ;;
    *)
      echo::debug "Subcommand args ($1) added"
      args+=("$1")
      ;;
   esac
   shift
done
eval set -- "${args[@]}"


# Assign the first argument to a string
COMMAND=${1:-}
if [ "$COMMAND" = "" ]; then
    doc::help
    echo::err "A command is mandatory"
    exit 1
fi
# Help
if [[ "$COMMAND" =~ "-h"|"--help"|"help" ]]; then
  doc::help
  exit
fi
shift  # Remove the first argument from the argument list

# Get the env
source kubee-env

bash::trap 'exit_code=$?; if [ $exit_code -ne 0 ]; then echo -e "\033[0;33mScript failed use the --debug flag to get more information\033[0m"; fi' EXIT

case "$COMMAND" in
  "cluster")
     source kubee-cluster "$@" || error::exit $?
    ;;
  "app")
    source kubee-app "$@" || error::exit $?
    ;;
  "chart")
    source kubee-chart "$@" || error::exit $?
    ;;
  "kubectl")
    source kubee-kubectl "$@" || error::exit $?
    ;;
  *)
    doc::help synopsis
    echo::err  "Command $COMMAND is unknown"
    exit 1
esac
