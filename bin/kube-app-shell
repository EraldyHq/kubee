#!/bin/bash
# @name kube-bash
# @brief Start bash in a pod via bash
# @description
#     Connect with a shell (bash by default) to a pod by app name
#
#

set -Eeuo pipefail
source bashlib-echo.sh
source bashlib-doc.sh
source bashlib-bash.sh
source bashlib-kube.sh
source bashlib-error.sh
error::set_trap

synopsis(){

  echo ""
  echo "Get a shell into a pod or your cluster with busybox"
  echo ""
  echo '```bash'
  echo "$(basename "$0") --shell <shell name> <app name>"
  echo '```'
  echo ""
  echo "where:"
  echo ""
  # shellcheck disable=SC2016
  echo '* `app name` default to the env `KUBE_APP_NAME` may be:'
  # shellcheck disable=SC2016
  echo '    * an app name (used with the label `app.kubernetes.io/name=<app name>` select the target pod)'
  # shellcheck disable=SC2016
  echo '    * or `busybox` to run a standalone busybox pod'
  # shellcheck disable=SC2016
  echo '* `shell name` may be:'
  # shellcheck disable=SC2016
  echo '  * a shell path (ie `bash`, `sh`, `bin/bash`)'
  # shellcheck disable=SC2016
  echo '  * or `ephemeral` to add busybox as an ephemeral container if your container app has no shell'

}

######################
# Main
######################

# Set
APP_NAME=""
SHELL_NAME=""

# Normalization
# A shell option with an option argument
args=$(getopt --longoptions "shell:"  --options "s:"  -- "$@")
# eval set to set the positional arguments back to $args
eval set -- "$args"

# Loop
while [[ $# -gt 0 ]]
do
   case "$1" in
    "--shell"|"-s")
      shift
      SHELL_NAME=$1
      shift;
    ;;
    --)
      # Starts argument
      shift
      ;;
    *)
      APP_NAME=$1
      shift
      ;;
  esac
done

# Check if the app name is provided
if [ "$APP_NAME" == "" ]; then
    if ! APP_NAME=$(kube::get_app_name_from_env); then
      doc::help
      echo::err "An app name was not found"
      exit 1
    fi
fi

if [[ "$APP_NAME" =~ "-h"|"help"|"--help" ]]; then
  doc::help
  exit
fi


# Set the known default shell
if [ "$SHELL_NAME" == "" ]; then
  case "$APP_NAME" in
    "prometheus"|"vault")
      SHELL_NAME=/bin/sh;
      ;;
    *)
      SHELL_NAME=/bin/bash
    ;;
  esac
fi


kube::set_app_env_up "$APP_NAME"


BUSY_BOX_IMAGE=busybox:1.36.1
if [ "$APP_NAME" == "busybox" ]; then
    kubectl run -it busybox-pod --image=$BUSY_BOX_IMAGE --restart=Never --rm -n default
    exit 0
fi


echo::info "Getting Pod Name and Namespace for app $APP_NAME"

read -r POD_NAME POD_NAMESPACE <<< "$(kube::get_resource_by_app_name "$APP_NAME" pod)"
if [ "$POD_NAME" == "" ]; then
    echo::err "Pod not found with label $(kube::get_app_label "$APP_NAME")"
    exit 1
fi

echo::info "Pod Name: $POD_NAME"
echo::info "Pod Namespace: $POD_NAMESPACE"

if [ "$SHELL_NAME" == "ephemeral" ]; then
  echo::info "Starting a ephemeral busybox shell on the pod $POD_NAMESPACE/$POD_NAME"
  kubectl debug -it --image=$BUSY_BOX_IMAGE -n "$POD_NAMESPACE" --target="$POD_NAME" ephemeral-shell
  exit 0
fi

echo::info "Starting the shell $SHELL_NAME on the pod $POD_NAMESPACE/$POD_NAME"
# Note: -c ${CONTAINER_NAME} is mandatory for pods that have more than a single container.
kubectl exec -it "$POD_NAME" -n "$POD_NAMESPACE" -- "$SHELL_NAME"