#!/bin/bash

# shellcheck source=./bashlib-error.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-error.sh"
error::set_strict_mode
error::set_trap
# shellcheck source=./bashlib-echo.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-echo.sh"
# shellcheck source=./bashlib-doc.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-doc.sh"

# @description test the connection to the cluster
test_connection(){

  if OUTPUT=$(kubectl --kubeconfig <(kube::config) cluster-info); then
    echo::info "Test Connection succeeded"
    return 0;
  fi
  echo::err "No connection could be made with the cluster"

  case "$KUBE_X_KUBECTL" in
    "kubectl")
      if [ -z "$KUBECONFIG" ]; then
            echo::err "Note: No KUBECONFIG env found"
      else
          if [ ! -f "$KUBECONFIG" ]; then
            echo::err "The KUBECONFIG env file ($KUBECONFIG) does not exist"
          else
            echo::info "The file ($KUBECONFIG) may have bad cluster info"
            echo::err "Note: The config is:"
            kubectl config view
          fi
      fi
      ;;
    "kubectx")
        echo::err "Note: The kubectx config is:"
        kubectx config view --raw
      ;;
    *)
        echo::err "The KUBE_X_KUBECTL value $KUBE_X_KUBECTL is unknown";
        ;;
  esac

  echo::err "We got the following output from the connection"
  echo::err "$OUTPUT"
  return 1

}

synopsis(){
  cat <<EOF
\`\`\`bash
$(basename "$0") [-n|--namespace namespaceName] [kubectl args]
\`\`\`

where:

* \`-n|--namespace\` specifies the \`namespace\` default to \`KUBE_X_APP_NAMESPACE\` or \`KUBE_X_DEFAULT_NAMESPACE\` and ultimately to \`default\`.

* the
* or the \`-n|--namespace\` flag
EOF
}

if [ "${1:-}" == "synopsis" ]; then
  synopsis
  exit
fi

args=()

KUBE_X_APP_NAMESPACE=${KUBE_X_APP_NAMESPACE:-}
while [[ $# -gt 0 ]]
do
   case  "$1" in
    -n|--namespace)
      shift
      if [ "${1:-}" == "" ]; then
        echo::err "The -n or --namespace flag expects a value"
        exit 1
      fi
      KUBE_X_APP_NAMESPACE="$1"
      ;;
    --all-namespaces)
      # The created kubeconfig needs a namespace
      # In a all-namespace query we set it to default
      KUBE_X_APP_NAMESPACE="default"
      args+=("$1")
      ;;
    *)
      args+=("$1")
      ;;
   esac
   shift
done



# Get env
KUBECTX_ENV=$(source kubectl-xenv) || error::exit $?
eval "$KUBECTX_ENV"


# Paths
PASS_CLIENT_TOKEN_PATH="$KUBE_X_PASS_HOME/users/$KUBE_X_USER/client-token"
PASS_CLIENT_CERT_PATH="$KUBE_X_PASS_HOME/users/$KUBE_X_USER/client-certificate-data"
PASS_CLIENT_KEY_DATA="$KUBE_X_PASS_HOME/users/$KUBE_X_USER/client-key-data"
PASS_CLUSTER_CERT_PATH="$KUBE_X_PASS_HOME/clusters/$KUBE_X_CLUSTER/certificate-authority-data"
PASS_CLUSTER_SERVER_PATH="$KUBE_X_PASS_HOME/clusters/$KUBE_X_CLUSTER/server"

###################
# Client
###################
# Token?
if ! KUBE_X_CLIENT_TOKEN=$(pass "$PASS_CLIENT_TOKEN_PATH" 2>/dev/null); then
  KUBE_X_CLIENT_TOKEN=""
  if ! KUBE_X_CLIENT_CERTIFICATE_DATA=$(pass "$PASS_CLIENT_CERT_PATH" 2>/dev/null); then
    echo::err "No client token or client certificate has been found in pass at $PASS_CLIENT_TOKEN_PATH and $PASS_CLIENT_CERT_PATH respectively"
    echo::err "Env:"
    echo::echo "$KUBECTX_ENV"
    exit 1
  fi
  # Private Key
  if ! KUBE_X_CLIENT_KEY_DATA=$(pass "$PASS_CLIENT_KEY_DATA" 2>/dev/null); then
    echo::err "No client key has been found in pass at $PASS_CLIENT_TOKEN_PATH and $PASS_CLIENT_CERT_PATH respectively"
    echo::err "Env:"
    echo::echo "$KUBECTX_ENV"
    exit 1
  fi
fi

###################
# Cluster
###################
if ! KUBE_X_CLUSTER_CERTIFICATE_AUTHORITY_DATA=$(pass "$PASS_CLUSTER_CERT_PATH" 2>/dev/null); then
  echo::err "No cluster certificate authority has been found in pass at $PASS_CLUSTER_CERT_PATH"
  echo::err "Env:"
  echo::echo "$KUBECTX_ENV"
  exit 1
fi

if ! KUBE_X_CLUSTER_SERVER=$(pass "$PASS_CLUSTER_SERVER_PATH" 2>/dev/null); then
  echo::err "No cluster server has been found in pass at $PASS_CLUSTER_PASS_CLUSTER_SERVER_PATH"
  echo::err "Env:"
  echo::echo "$KUBECTX_ENV"
  exit 1
fi


kube::config(){

  cat <<-EOF
apiVersion: v1
clusters:
  - name: $KUBE_X_CLUSTER
    cluster:
      certificate-authority-data: $KUBE_X_CLUSTER_CERTIFICATE_AUTHORITY_DATA
      server: $KUBE_X_CLUSTER_SERVER
contexts:
  - context:
      cluster: $KUBE_X_CLUSTER
      namespace: $KUBE_X_CONNECTION_NAMESPACE
      user: $KUBE_X_USER
    name: $KUBE_X_CONTEXT_NAME
current-context: $KUBE_X_CONTEXT_NAME
kind: Config
preferences: {}
users:
  - name: $KUBE_X_USER
    user:
      client-certificate-data: $KUBE_X_CLIENT_CERTIFICATE_DATA
      client-key-data: $KUBE_X_CLIENT_KEY_DATA
      token: $KUBE_X_CLIENT_TOKEN
EOF

}

###########################
# Connection test
###########################
# We test the connection because otherwise the user
# may get a message that a resource could not be found
# where the culprit should have been the connection
# Test Connection
test_connection




kubectl --kubeconfig <(kube::config) "${args[@]}"