#!/usr/bin/env bash

# shellcheck source=./bashlib-error.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-error.sh"
error::set_strict_mode
error::set_trap
# shellcheck source=./bashlib-echo.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-echo.sh"
# shellcheck source=./bashlib-doc.sh
source "${BASHLIB_LIBRARY_PATH:-}${BASHLIB_LIBRARY_PATH:+/}bashlib-doc.sh"

synopsis(){
  cat <<EOF
This tool adds also the command \`promtool check prometheusRules`\ to check one \`PrometheusRule` CRD file of \`Prometheus Operator\`.

EOF
    docker run "${DOCKER_OPTIONS[@]}" prom/prometheus:latest --help
}

check_prometheus_rule(){

  CRD_FILE_PATH=${1:-}
  if [ "$CRD_FILE_PATH" == "" ]; then
    doc::help synopsis
    echo::err "The path of the PrometheusRule CRD file is mandatory"
    exit 1
  fi
  if [ ! -f "$CRD_FILE_PATH" ]; then
    echo::err "The PrometheusRule CRD file ($CRD_FILE_PATH) does not exist"
    exit 1
  fi

  # Create and mount the file
  RULE_LOCAL_SHM_PATH=/dev/shm/prometheus-rule
  RULE_DOCKER_PATH=/tmp/prometheus-rule
  DOCKER_OPTIONS+=("-v" "$RULE_LOCAL_SHM_PATH:$RULE_DOCKER_PATH")
  # Extract the rule from spec to create the rule file
  yq '.spec' "$CRD_FILE_PATH" >| $RULE_LOCAL_SHM_PATH

  docker run "${DOCKER_OPTIONS[@]}" prom/prometheus:latest check rules "$RULE_DOCKER_PATH"

}

# Docker options
DOCKER_OPTIONS=()
DOCKER_OPTIONS+=("--name" "promtool")
DOCKER_OPTIONS+=("--rm")
DOCKER_OPTIONS+=("-it")
DOCKER_OPTIONS+=("--entrypoint" "promtool")
DOCKER_OPTIONS+=("-v" "$PWD:/prometheus")

# Synopsis
if [ "${1:-}" == "synopsis" ]; then
  synopsis
  exit
fi

PROM_TOOL_ARGS=("$@")


args=$(getopt -l "help,url,http.config.file,debug,no-debug,version,run" -o "h" -- "$@")
# eval set to set the positional arguments back to $args
eval set -- "$args"

# Check if help was asked
HELP_ASKED=${HELP_ASKED:-0}
KUBE_X_PROM_URL=${KUBE_X_PROM_URL:-"http://localhost:9090"}
ARGS=()
ACTION=""
METHOD=""
while [[ $# -gt 0 ]]
do
   case $1 in
    "--help"|"-h")
     HELP_ASKED=1
     ;;
    "--url")
     shift
     KUBE_X_PROM_URL="$1"
     ;;
   "--http.config.file")
      shift
      KUBE_X_HTTP_CONFIG_FILE="$1"
      ;;
   "--")
     # The arg separator from getopt
     ;;
   *)
      if [ "$ACTION" = "" ]; then
         ACTION="$1"
         shift;
         continue;
      fi
      if [ "$METHOD" = "" ]; then
         METHOD="$1"
         shift;
         continue;
      fi
      ARGS+=("$1")
     ;;
   esac
   shift
done

echo::debug "Action: $ACTION"
echo::debug "Method: $METHOD"

# Prometheus Rule Check
if [ "$ACTION" == 'check' ] && [[ "${METHOD}" =~ 'prometheusrules'|'prometheusrule' ]]; then
  check_prometheus_rule "${ARGS[@]}"
  exit
fi

# Url and http.config.file
# They are passed
# * only if the help is not asked
# * for the commands:
#    `check healthy|ready`
#    `query|push`
if (
    ([ "$ACTION" == 'check' ] && [[ "${METHOD}" =~ 'healthy'|'ready' ]]) ||
    ([[ "${ACTION}" =~ 'query'|'push' ]])
  ) && [ "$HELP_ASKED" != "1" ]; then

  PROM_TOOL_ARGS+=("--url" "${KUBE_X_PROM_URL}")

  # Basic Auth
  if [ "${KUBE_X_PROM_BASIC_AUTH_PASS_USER:-}" != "" ] && [ "${KUBE_X_HTTP_CONFIG_FILE:-}" == "" ]; then
    # https://prometheus.io/docs/alerting/latest/configuration/#http_config
    CONFIG_FILE=$(cat <<EOF
basic_auth:
username: $(pass "${KUBE_X_PROM_BASIC_AUTH_PASS_USER}")
password: $(pass "${KUBE_X_PROM_BASIC_AUTH_PASS_PASSWORD}")
EOF
)
    # Creating the config file in memory
    # and mounting it into docker
    LOCAL_PATH=/dev/shm/promtool-config-file
    DOCKER_PATH=/tmp/promtool-config-file
    echo "$CONFIG_FILE" >| $LOCAL_PATH
    DOCKER_OPTIONS+=("-v" "$LOCAL_PATH:$DOCKER_PATH")

    # Args
    PROM_TOOL_ARGS+=("--http.config.file" $DOCKER_PATH)

  fi

fi

docker run \
  "${DOCKER_OPTIONS[@]}" \
  prom/prometheus:latest \
  "${PROM_TOOL_ARGS[@]}"
