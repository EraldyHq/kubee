# Default Inventory Template
k3s_cluster:
  children:
    server:
      # Number of hosts server must be odd to avoid split brain issues
      # with etcd and the recommended number is 3.
      hosts:
        # The ansible host name
        # Used by k3s as the FQDN when creating the kubeconfig file
        $KUBEE_CLUSTER_SERVER_01_FQDN:
          # The name of the host (dns or ip) to connect to,
          # if different from the inventory hostname.
          ansible_host: "$KUBEE_CLUSTER_SERVER_01_ANSIBLE_HOST"
          # The FQDN to avoid: # https://docs.k3s.io/networking/basic-network-options#nodes-without-a-hostname
          # Some cloud providers, such as Linode, will create machines with "localhost" as the hostname
          # and others may not have a hostname set at all.
          # This can cause problems with domain name resolution.
          # You can run K3s with the --node-name flag or K3S_NODE_NAME environment variable
          # and this will pass the node name to resolve this issue.
          kubee_os_hostname: "$KUBEE_CLUSTER_SERVER_01_FQDN"

#    agent:
#      hosts:
#        192.16.35.12:
#        192.16.35.13:
  vars:
    # With the host-specific parameter ansible_connection=<connector>
    # https://docs.ansible.com/ansible/latest/inventory_guide/intro_inventory.html#non-ssh-connection-types
    # see connection: ansible-doc -t connection -l
    ansible_connection: "$KUBEE_CLUSTER_CONNECTION"
    # The default username to use for log in. Most plugins default to the ‘current user running Ansible’.
    # Can be set via ANSIBLE_REMOTE_USER (default to the user executing Ansible)
    # https://docs.ansible.com/ansible/latest/reference_appendices/config.html#envvar-ANSIBLE_REMOTE_USER
    ansible_user: "$KUBEE_CLUSTER_SERVER_CONNECTION_USER"
    # ANSIBLE_HOST_KEY_CHECKING
    # See also https://docs.ansible.com/ansible/latest/reference_appendices/config.html#envvar-ANSIBLE_HOST_KEY_CHECKING
    k3s_version: "$KUBEE_CLUSTER_K3S_VERSION"
    #
    # By default, K3s uses a single static token for both servers and agents.
    # This token cannot be changed once the cluster has been created.
    # It is possible to enable a second static token that can only be used to join agents,
    # or to create temporary kubeadm style join tokens that expire automatically.
    # The k3s doc: https://docs.k3s.io/cli/token
    #
    # See k8s doc: Authentication Token (auth between nodes):
    # https://kubernetes.io/docs/reference/access-authn-authz/kubelet-tls-bootstrapping/#token-authentication-file
    # used in Kubelet Bootstrap initialization
    # https://kubernetes.io/docs/reference/access-authn-authz/kubelet-tls-bootstrapping/#bootstrap-initialization
    #
    # The token should be a random string of reasonable length. You can generate
    # one with the following commands:
    # - openssl rand -base64 64 | tr -d '\n'
    # - pwgen -s 64 1
    # - head -c 16 /dev/urandom | od -An -t x | tr -d ' '
    #
    # You can use a password manager to encrypt this value / keep it secret.
    # If omitted the first server automatically generate one.
    #
    # Don't change the token as the cluster data is encrypted with it
    #
    k3s_token: "$KUBEE_CLUSTER_K3S_TOKEN"
    # Admin user
    # An admin is created on the server if these values are not empty
    # The admin username
    kubee_os_admin_username: "$KUBEE_CLUSTER_SERVER_ADMIN_USERNAME"
    # The admin user Public key that is added to the `authorized_keys`
    # The key is mandatory if the admin username is not empty
    kubee_os_admin_public_key: "$KUBEE_CLUSTER_SERVER_ADMIN_PUBLIC_KEY"