# Enabled
# Not a string, no quote
enabled: false
# The installation namespace
# The kube-system namespace tells kubernetes that this app has a higher priority
namespace: 'kube-system'

# A default certificate Used to provide https locally
# Set the default certificate as default traefik cert
# Mandatory for kubernetes-dashboard on a local development
# The rootCA should be added to the OS/Browser as trusted root CA
# https://doc.traefik.io/traefik/https/tls/#default-certificate
default_certificate:
  # The PEM content file
  # Not a path to the cert file relative to the working directory (ie cluster directory)
  # Set with `KUBEE_HELM_INSTALL_OPTIONS`
  # --set-file KUBEE.traefik.defaultCertificate.cert=cert/kube-x.dev+1.pem
  cert: ''
  # The PEM content file
  # Not a path to the key file relative to the working directory (ie cluster directory)
  # Set with `KUBEE_HELM_INSTALL_OPTIONS`
  # --set-file KUBEE.traefik.defaultCertificate.key=cert/kube-x.dev+1-key.pem
  key: ''


# Traefik dashboard
# The FQDN is dnsName.apexDomain
# If not empty, an ingress is created
# example: hostname: 'traefik-haship.nip.io'
hostname: ''

# Ingress Auth Configuration
auth:
  # The middleware auth name ingress Authentication
  # That's applied for internal web app (such as Traefik Dashboard, Prometheus, Alert Manager, ...)
  # The app or api endpoints are still available from an internal container
  # The supported auth are basic-auth and forward-auth
  middleware_name: 'basic-auth'
  # Private Network ranges
  # used for Ingress Ip restrictions (Traefik IpAllowList)
  # example for a home ip: 143.176.206.80/32
  private_networks: [ ]

# List of middlewares used in Kubee chart
# https://doc.traefik.io/traefik/middlewares
middlewares:
  # A basic Auth Middleware
  # With the email as main identifier
  # https://doc.traefik.io/traefik/middlewares/http/basicauth/
  # The admin user is added
  basic_auth:
    name: 'basic-auth'
    # List of extra users alongside the admin user
    users:
    # Example:
    # users:
    #   emailUser1: password1
    #   emailUser2: password2
  # Create an IP Allow list for webhook of git service
  # Used in Gitops app such as Argocd
  # https://doc.traefik.io/traefik/middlewares/http/ipallowlist/
  git_hooks:
    name: 'git-hooks'
    service: 'github' # only supported for now
  # Forward Auth
  # https://doc.traefik.io/traefik/middlewares/http/forwardauth/
  # Traefik-forward-auth should be installed for this auth to work
  forward_auth:
    name: 'forward-auth'
    # The auth middleware
    # Possible values: oauth2-proxy or traefik-forward-auth
    service: 'oauth2-proxy'
  # Middleware to apply headers on forwarded auth
  auth_headers:
    name: 'auth-headers'


# Traefik Helm Values
# https://github.com/traefik/traefik-helm-chart/blob/master/traefik/values.yaml
traefik:

  # We do it ourself
  # https://github.com/traefik/traefik-helm-chart/blob/master/EXAMPLES.md#access-traefik-dashboard-without-exposing-it
  ingressRoute:
    dashboard:
      enabled: false

  metrics:
    # Prometheus is enabled by default
    prometheus:
      # The metrics port is not in the traefik service
      # This value creates a dedicated metrics service to use with ServiceMonitor
      # Enable Prometheus Metrics https://doc.traefik.io/traefik/observability/metrics/prometheus/
      # Metrics Info: https://doc.traefik.io/traefik/observability/metrics/overview/#global-metrics
      service:
        enabled: false # We do it ourselves

  additionalArguments:
    # Don't verify cert on pods
    # [serversTransport.insecureSkipVerify](https://doc.traefik.io/traefik/routing/services/#insecureskipverify) is set to
    # true by default on server, otherwise there will be an error
    # if a pod loads a self-signed certificate with a CA that Traefik does not know.
    - '--serversTransport.insecureSkipVerify=true'
    # Debug
    # - '--log.level=DEBUG'
    # Logs just add too much noise on what is going on
    # - '--accesslog=false'

  service:
    # type: LoadBalancer
    # You can't set up a nodePort because the port is a high-end port between 30000-32767
    # You can install it as DaemonSet + Node port ?
    # https://github.com/traefik/traefik-helm-chart/blob/master/EXAMPLES.md#install-as-a-daemonset
    ipFamilyPolicy: SingleStack
    ipFamilies:
      - IPv4
    spec: {
      # Allow Origin Remote IP to be forwarded
      externalTrafficPolicy: Local
    }

  # -- nodeSelector is the simplest recommended form of node selection constraint.
  nodeSelector: {
    # Context, by default:
    # * the deployment of Traefik is `LoadBalancer`
    # * K3s uses `ServiceLB (Klipper)` as load balancer controller
    # * ServiceLB (Klipper) label node "svccontroller.k3s.cattle.io/enablelb"=true to control where load balancer controller pods are installed
    #
    # We use the ServiceLB (Klipper) label "svccontroller.k3s.cattle.io/enablelb"=true
    # so that Traefik and the load balancer controller pods are always collocated
    #
    # ie with the following label applied on `kube-server-01.eraldy.com`
    #
    # kubectl label nodes kube-server-01.eraldy.com svccontroller.k3s.cattle.io/enablelb=true
    #
    # Traefik would be installed on kube-server-01.eraldy.com
    # The node should have the label: https://docs.k3s.io/advanced#node-labels-and-taints
    # "svccontroller.k3s.cattle.io/enablelb": "true"
  }


  providers:
    kubernetesCRD:
      # return 503, needed to start stopped container with sablier
      # https://acouvreur.github.io/sablier/#/guides/code-server-traefik-kubernetes?id=_3-deploy-traefik-using-helm
      allowEmptyServices: true
    kubernetesIngress:
      # return 503, needed to start stopped container with sablier
      allowEmptyServices: true

  ports:
    web:
      # https://doc.traefik.io/traefik/routing/entrypoints/#redirection
      redirections:
        entryPoint:
          to: websecure
          scheme: https

      #websecure:
      # # Use it to add trusted proxy
      # Enable X-Headers from Cloudflare
      # https://doc.traefik.io/traefik/v2.3/routing/entrypoints/#forwarded-headers
      # forwardedHeaders:
      #  trustedIPs: "{{ cloudflare_cidr | join(',') }}"

  # persistence:
  # -- Enable persistence using Persistent Volume Claims
  # ref: http://kubernetes.io/docs/user-guide/persistent-volumes/.
  # It can be used to store TLS certificates along with `certificatesResolvers.<name>.acme.storage`  option



# Don't change
kubee_internal:
  install_cross_dependency: false

