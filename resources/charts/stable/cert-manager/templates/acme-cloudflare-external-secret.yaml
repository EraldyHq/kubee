{{- if eq .Values.cluster.dns.cloudflare.api_token.type "external-secret" }}
{{- if ne .Values.external_secrets.enabled true}}
{{ fail "external secret should be enabled to create a cloudflare api token of tyoe external-secret"}}
{{- end }}
{{ $ := mergeOverwrite $ (dict "component" "cloudflare") }}
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  # A unique name in the namespace
  name: '{{ include "cert-manager-cloudflare-secret-name" . }}'
  namespace: '{{ include "cert-manager.namespace" (dict "Values" (index $.Values "cert-manager") "Release" $.Release ) }}'
  labels:
      {{- include "kubee-manifest-labels" $ | indent 4}}
spec:
  # The store from where
  secretStoreRef:
    name: '{{ include "cert-manager-cloudflare-secret-name" . }}'
    kind: ClusterSecretStore
  # The target define the secret created
  # and may be pre-processed via template
  target:
    name: '{{ include "cert-manager-cloudflare-secret-name" . }}' # Secret name in Kubernetes
    template:
      metadata:
        annotations:
          description: "The Cloudflare Api Token"
  # Mapping to local secret from remote secret
  data:
    - secretKey: {{ .Values.cluster.dns.cloudflare.api_token.key }} # Prop Name in the secret
      remoteRef:
        key: {{ .Values.cluster.dns.cloudflare.api_token.key }} # Name of the remote secret
        property: {{ required "The cluster cluster.dns.cloudflare.secret.external_secret_remote_ref.property is required" .Values.cluster.dns.cloudflare.api_token.property }} # Prop Name in the remote secret
{{- end }}