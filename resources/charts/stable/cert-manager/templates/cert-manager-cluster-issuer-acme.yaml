{{/*

Test:
helm template -s templates/cluster-issuer-acme.yaml \
  --set 'dns01.cloudflare.cloudflareApiToken=xxxx' \
  --set 'cluster.auth.admin_user.email=foo@bar.com' \
  --set 'dns01.cloudflare.dnsZones[0]=yolo' \
  . | yq




Range:
https://helm.sh/docs/chart_template_guide/control_structures/#looping-with-the-range-actionhttps://helm.sh/docs/chart_template_guide/control_structures/#looping-with-the-range-action
*/}}
{{- $acme_issuers := list
  (dict "name" "letsencrypt-prod" "url" "https://acme-v02.api.letsencrypt.org/directory")
  (dict "name" "letsencrypt-staging" "url" "https://acme-staging-v02.api.letsencrypt.org/directory")
}}
{{- range $acme_issuers}}
---
{{/*# Create a ClusterIssuer (can issue cert for the whole cluster)*/}}
apiVersion: cert-manager.io/v1
{{- /*# `Issuer` kind is scoped to a namespace*/}}
kind: ClusterIssuer
metadata:
  name: '{{ .name }}'
  namespace: '{{ include "cert-manager.namespace" (dict "Values" (index $.Values "cert-manager") "Release" $.Release ) }}'
spec:
  acme:
    {{- /* The ACME server URL*/}}
    server: '{{ .url }}'
    {{- /* Email address used for ACME registration*/}}
    email: '{{ $.Values.cluster.auth.admin_user.email | required "cluster.auth.admin_user.email is required." }}'
    {{- /* Name of a secret used to store the ACME account private key*/}}
    privateKeySecretRef:
      name: '{{ .name }}'
    {{- /* Enable the HTTP-01 challenge provider*/}}
    solvers:
      {{- /* empty 'selector' means that this solver matches all domains*/}}
      - selector: { }
        {{- /*
          Http01 challenge
          https://cert-manager.io/docs/tutorials/acme/http-validation/
          This challenge is disabled if ingressClassName is empty
        */}}
        http01:
          ingress:
          {{- /*
            # Configure which Ingress controller is used to resolve the challenge
            # If the ingressClassName field is specified,
            # a new ingress resource with a randomly generated name
            # will be created in order to solve the challenge.
            # This new resource will have the field ingressClassName with the value of the ingressClassName field.
            # Value: nginx or traefik
            # See Traefik example: https://doc.traefik.io/traefik/user-guides/cert-manager/#example-with-acme-and-http-challenge
            # Default IngressClassName
            # Used by cert manager to create ingress resource to resolve the http01 challenge
            # A new ingress resource with a randomly generated name is created in order to solve the challenge.
           */}}
            {{- if ne $.Values.traefik.enabled true }}
            {{- fail "Traefik should be enabled to resolve http01 challenge"}}
            {{- end }}
            ingressClassName: 'traefik'
      {{- /*
        Selector: 'DnsName', `DnsZone`, `matchLabels` can be specified
        https://cert-manager.io/docs/configuration/acme/#adding-multiple-solver-types
      */}}
      {{- if ne $.Values.dns01.cloudflare.api_token.k8s_secret_value "" }}
      - selector:
          {{- /*
          # The selector is a DNS Zone
          # To allow the creation of certificate on ingress spec.
          # This is not:
          # * a matchLabel because it is not possible to set a label/annotation for cert-manager in an ingress spec
          # * a DNSName because it must be exact and is obviously unknown in advance
          */}}
          {{- if not $.Values.dns01.cloudflare.dns_zones }}
            {{- fail "dns01.cloudflare.dns_zones should not be empty" }}
          {{- end }}
          dnsZones: {{ $.Values.dns01.cloudflare.dns_zones | toYaml | nindent 12 }}
        {{- /* https://cert-manager.io/docs/configuration/acme/dns01/*/}}
        dns01:
          {{- /*
          # Doc: https://cert-manager.io/docs/configuration/acme/dns01/cloudflare/
          # Spec: https://cert-manager.io/docs/reference/api-docs/#acme.cert-manager.io/v1.ACMEIssuerDNS01ProviderCloudflare
          */}}
          cloudflare:
            {{- /*
            # Note in the doc, they use an email because they show an apiKey Auth, not an apiToken
            # `ApiToken` is now the preferred method
            */}}
            apiTokenSecretRef:
              name: '{{ include "cert-manager-cloudflare-secret-name" $ }}'
              key: '{{ include "cert-manager-cloudflare-secret-key" $ }}'
      {{- end -}}

{{- end -}}
