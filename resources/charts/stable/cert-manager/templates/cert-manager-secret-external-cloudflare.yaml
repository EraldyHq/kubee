{{/*

Test:
helm template -s templates/secret-external-cloudflare.yaml \
  --set 'dns01.cloudflare.secret.external_secret_remote_ref.key=cloudflare'  \
  --set 'dns01.cloudflare.secret.external_secret_remote_ref.property=cert-manager-api-token'  \
  --set 'cluster.auth.admin_user.email=foo@bar.com'  \
  --set 'dns01.cloudflare.dnsZones[0]=yolo' \
  . | yq

*/}}
{{- if ne .Values.dns01.cloudflare.api_token.external_secret_remote_ref.key "" }}
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  # A unique name in the namespace
  name: '{{ include "cert-manager-cloudflare-secret-name" . }}'
  namespace: '{{ include "cert-manager.namespace" (dict "Values" (index $.Values "cert-manager") "Release" $.Release ) }}'
spec:
  # The store from where
  secretStoreRef:
    name: '{{ include "cert-manager-cloudflare-secret-name" . }}'
    kind: ClusterSecretStore
  # The target define the secret created
  # and may be pre-processed via template
  target:
    name: '{{ include "cert-manager-cloudflare-secret-name" . }}' # Secret name in Kubernetes
    template:
      metadata:
        annotations:
          description: "The Cloudflare Api Token"
  # Mapping to local secret from remote secret
  data:
    - secretKey: {{ template "cert-manager-cloudflare-secret-key" }} # Prop Name in the secret
      remoteRef:
        key: {{ .Values.dns01.cloudflare.api_token.external_secret_remote_ref.key }} # Name of the remote secret
        property: {{ required "The dns01.cloudflare.secret.external_secret_remote_ref.property is required" .Values.dns01.cloudflare.api_token.external_secret_remote_ref.property }} # Prop Name in the remote secret
{{- end }}