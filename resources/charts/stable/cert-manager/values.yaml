# The cert manager with monitoring (alert and dashboard)

# -- If true, cert-manager is or will be installed on the cluster
# When disabled, the default ingress certificate specified on Traefik is used
# Not a string, a boolean so no quote
enabled: false
# -- The installation namespace
namespace: 'cert-manager'

issuer_name: 'letsencrypt-staging'

# The issuers
issuers:
  # The external issuer is used to create certificate for public domain name
  public:
    # @schema
    # enum: [ 'letsencrypt-staging', 'letsencrypt-prod' ]
    # required: true
    # @schema
    # -- The acme issuer used in all ingress (external certificate request) of kubee
    # It should be changed to `letsencrypt-prod` when the `letsencrypt-staging` is working and validated
    name: 'letsencrypt-staging'
  # The private issuer is used to create certificate for the private cluster.local domain
  cluster:
    # @schema
    # const: 'kubee-ca'
    # @schema
    # -- The private issuer is used to issue certificate for the private cluster.local domain
    name: 'kubee-cluster-ca'



# Dns01 challenge
# You don't need to publish a DNS A record
dns01:
  # Doc: https://cert-manager.io/docs/configuration/acme/dns01/cloudflare/
  # Spec: https://cert-manager.io/docs/reference/api-docs/#acme.cert-manager.io/v1.ACMEIssuerDNS01ProviderCloudflare
  # Notes: in the doc, they use an email because they show an apiKey Auth, not an apiToken
  # `ApiToken` is now the preferred method
  cloudflare:
    # See cert-manager/README.md on how to get cloudflare api key
    # A secret or external secret can be created
    secret:
      # A Kubernetes secret will be created if not empty
      cloudflare_api_token: ''
      # An external secret will be created
      # if remote ref key is not empty
      external_secret_remote_ref:
        key: ''
        property: ''
    # -- the dns Zones that are managed by cloudflare, mandatory (ie a list of apex domains)
    dns_zones: []

# https://github.com/cert-manager/cert-manager/blob/release-1.16/deploy/charts/cert-manager/values.yaml
# defined by either the name or alias of your dependency in Chart.yaml
# @ignored
cert-manager:
  # Installation namespace
  namespace: '{{ .Values.namespace }}'
  crds:
    enabled: true
  webhook:
    timeoutSeconds: 4   # Example: changing the webhook timeout using a Helm parameter
  # https://cert-manager.io/docs/devops-tips/prometheus-metrics/
  # https://github.com/cert-manager/cert-manager/blob/master/deploy/charts/cert-manager/README.template.md#prometheus
  prometheus:
    # We don't create it ourselves because it's pretty hard.
    enabled: false
    servicemonitor:
      enabled: false
  # Cluster resource namespace
  # The namespace used to store cluster wide data (such as DNS provider credentials, certificate, ...)
  # Set the default namespace to search for a resource on the cert-manager controller
  # --cluster-resource-namespace=my-namespace
  # https://cert-manager.io/docs/configuration/#cluster-resource-namespace
  # The Cluster Resource Namespace is defaulted as being the `cert-manager` namespace,
  # A ClusterIssuer CA will create the certificate in this namespace
  # https://cert-manager.io/docs/configuration/ca/#deployment
  clusterResourceNamespace: ""


# @ignored
# Don't touch, used to block template output of cross dependency
kubee_internal:
  install_cross_dependency: false