{{- /*
We couldn't use an ingress because
we needed a `no tls transport`
and it's not set as a label on the ingress but on the service
We therefore needed to use a traefik IngressRoute

Note that we set this traefik server value to true
with the argument --serverstransport.insecureskipverify=true
We don't need it anymore but if the value change, it will not break.
*/}}
{{- if ne .Values.hostname "" }}
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: '{{ include "kubernetes-dashboard-name" . }}'
  namespace: '{{.Release.Namespace}}'
  #annotations:
  labels:
    app.kubernetes.io/name: '{{ .Release.Name }}'
spec:
  entryPoints:
    - websecure
  {{- if eq .Values.cert_manager.enabled true}}
  tls:
    # in the IngressRoute namespace
    secretName: '{{ include "kubernetes-dashboard-name" . }}'
  {{- end }}
  routes:
    - kind: Rule
      match: Host(`{{ .Values.hostname }}`)
      {{- /* Auth via Dex via oAuth Proxy if enabled    */}}
      {{- if and (eq .Values.traefik.auth.middleware_name .Values.traefik.middlewares.forward_auth.name) (eq .Values.traefik.middlewares.forward_auth.service "oauth2-proxy") }}
      {{- if eq .Values.kubee.auth.cluster_oidc.enabled true }}
      middlewares:
        - name: '{{ .Values.traefik.middlewares.forward_auth.name }}'
          namespace: '{{ .Values.traefik.namespace }}'
      {{- end }}
      {{- end }}
      services:
        # Ingress in front of kong
        # written here https://github.com/kubernetes/dashboard?tab=readme-ov-file#installation
        # and seen in the forward: https://github.com/kubernetes/dashboard/blob/master/docs%2Fuser%2Faccessing-dashboard%2FREADME.md#kubectl-port-forward
        - name: kubernetes-dashboard-kong-proxy
          port: 443
          # serversTransport is not an ingress property
          # but a service property
          # https://doc.traefik.io/traefik/routing/providers/kubernetes-ingress/#on-service
          # We can't therefore use an Ingress Object because we don't have access to the service
          # A server transport is namespaced scoped.
          serversTransport: '{{ include "kubernetes-dashboard-transport-no-tls-name" .}}'
        #      middlewares:
        # We can't use the basic auth  because it uses the `Authentication` header, and it conflicts with
        # the bearer token of the dashboard
        # - name: 'xxx'
{{- end}}