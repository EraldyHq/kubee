# Enabled or not
enabled: false
# The auth namespace
namespace: 'auth'
# The version
version: "v7.8.1"
# the hostname mandatory
hostname: ''
# Auth
auth:
  # Secret Mandatory: A random value used to sign cookies
  # cookie_secret must be 16, 24, or 32 bytes to create an AES cipher
  # Example command: dd if=/dev/urandom bs=32 count=1 2>/dev/null | base64 | tr -d -- '\n' | tr -- '+/' '-_' ; echo
  # https://oauth2-proxy.github.io/oauth2-proxy/configuration/overview#generating-a-cookie-secret
  cookie_secret: ''
  # Cookie Expiration is controlled by Oidc Token expiration
  # Add the domain of the hostname as cookie and while list domain
  use_domain_hostname: true
  # Optional domain of the cookie: the longest domain matching the request's host will be used (or the shortest cookie domain if there is no match).
  cookie_domains: []
  # Whitelist domains
  # Required to allow redirection back to original requested target
  whitelist_domains: []
  # Email Domains
  # Only users with this domain will be let in
  # Accepted value: `*` for all emails or `your.company.com`
  email_domains: [ '*' ]
  # Authenticated email address
  # Only users with this email addresses will be let in
  # The admin email is already taken into account
  email_addresses: []


# Oauth proxy helm values
# https://github.com/oauth2-proxy/manifests/blob/main/helm/oauth2-proxy/values.yaml
oauth2-proxy:
  config:
    # We use our own secret
    # The secret name
    existingSecret: oauth2-proxy-config
    # We use our own config
    # the configmap name
    existingConfig: oauth2-proxy-config
  # To set the name of objects
  fullnameOverride: 'oauth2-proxy'
  # To set the name of labels
  nameOverride: 'oauth2-proxy'
  # Metrics
  metrics:
    # Enable Prometheus metrics endpoint
    enabled: true
    serviceMonitor:
      # We do it ourselves
      enabled: false
  # Authenticated email
  authenticatedEmailsFile:
    # Not generated by the oauth2_proxy Helm Chart but by our chart
    enabled: false
    # Defines how the email addresses file will be projected, via a configmap or secret
    persistence: configmap
    # template is the name of the configmap what contains the email user list
    # Be aware the value name in the extern config map in data needs to be named to "restricted_user_access" or to the
    # provided value in restrictedUserAccessKey field.
    template: "oauth2-proxy-authenticated-emails"
    # The configmap/secret key under which the list of email access is stored
    restrictedUserAccessKey: "authenticated-emails"
  # Local User
  htpasswdFile:
    enabled: false # Dex or the oidc is having a list of user
  # Tls
  # https://github.com/oauth2-proxy/manifests/tree/main/helm/oauth2-proxy#tls-configuration
  httpScheme: https
  # Args are in config map
  #extraArgs:
  #  tls-cert-file: /etc/oauth2-proxy/tls/cert.pem
  #  tls-key-file: /etc/oauth2-proxy/tls/cert.key
  extraVolumeMounts:
    - name: tls
      mountPath: /etc/oauth2-proxy/tls
  extraVolumes:
    - name: tls
      secret:
        secretName: oauth2-proxy-kubee-tls-ca

# Tweak to not output the template of the kubee cross-dependency chart
# in the prometheus release
# It's used in the chart dependencies condition
kubee_internal:
  # Don't modify the value, don't change
  install_cross_dependency: false