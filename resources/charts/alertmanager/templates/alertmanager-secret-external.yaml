{{ if eq (.Values.kube_x.cluster).secret "ExternalSecret" }}
# A conf for secret in global configuration
# Doc: https://prometheus-operator.dev/docs/developer/alerting/#using-a-kubernetes-secret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  # A unique name in the namespace
  name: alertmanager-alertmanager
  labels:
    app.kubernetes.io/name: alertmanager
spec:
  # The store from where
  secretStoreRef:
    name: {{ .Values.kube_x.external_secrets.store.name }}
    kind: ClusterSecretStore
  # The target define the secret created
  # and may be pre-processed via template
  target:
    # Secret name in Kubernetes
    # Set in spec.configSecret of Alertmanager crd
    # 1alertmanager-{ALERTMANAGER_NAME}1 is the default name that we use
    name: alertmanager-alertmanager
    template:
      #  The name of the key holding the configuration data in the Secret has to be alertmanager.yaml
      data:
        # https://prometheus.io/docs/alerting/latest/configuration/#file-layout-and-global-settings
        # Example: https://prometheus.io/docs/alerting/latest/configuration/#example
        # https://github.com/prometheus/alertmanager/blob/main/doc/examples/simple.yml
        # A route is mandatory
        alertmanager.yaml: |
          global:
            # Clients are expected to continuously re-send alerts as long as they are still active (usually on the order of 30 seconds to 3 minutes)
            # An alert is considered as resolved if it has not been resend after the resolve_timeout configuration.
            resolve_timeout: 6m
            smtp_from: {{ .Values.kube_x.email.smtp.from }}
            smtp_smarthost: {{ .Values.kube_x.email.smtp.host }}:{{ .Values.kube_x.email.smtp.port }}
            smtp_hello: {{ .Values.kube_x.email.smtp.hello }}
            smtp_auth_username: {{ .SMTP_USER }}
            smtp_auth_password: {{ .SMTP_PWD }}
            smtp_require_tls: true
            opsgenie_api_key: {{ .OPS_GENIE_API_KEY }}
            opsgenie_api_url: https://api.opsgenie.com/
          # route and receivers are mandatory otherwise
          # we get an error
          route:
            receiver: "null"
            # Whether an alert should continue matching subsequent sibling nodes. (default to false)
            # False Mandatory otherwise we get: `provision alertmanager configuration: failed to initialize from secret: cannot have continue in root route`
            continue: false
          receivers:
            - name: "null"
      metadata:
        annotations:
          description: "The Global Conf for alert manager"
  # Mapping to local secret from remote secret
  data:
    - secretKey: SMTP_USER # Prop Name in the secret
      remoteRef:
        key: email # Name of the remote secret
        property: smtp-user # Prop Name in the remote secret
    - secretKey: SMTP_PWD # Prop Name in the secret
      remoteRef:
        key: email # Name of the remote secret
        property: smtp-password # Prop Name in the remote secret
    - secretKey: OPS_GENIE_API_KEY # Prop Name in the secret
      remoteRef:
        key: opsgenie # Name of the remote secret
        property: api-key # Prop Name in the remote secret
  {{- end -}}