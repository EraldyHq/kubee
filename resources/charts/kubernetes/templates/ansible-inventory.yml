{{- if and (eq .Values.provisioner "ansible") (eq .Values.distribution "k3s") }}
k3s_cluster:
  children:
    # Server hosts
    # Number of hosts server must be odd to avoid split brain issues
    # with etcd and the recommended number is 3.
    server:
      hosts:
        {{- if eq (len .Values.hosts.servers) 0 }}
        {{ fail "No server host found at kubernetes.hosts.servers. The list of servers is empty. Did you set a cluster name?"}}
        {{- end }}
        # The ansible host name
        # Used by k3s as the FQDN when creating the kubeconfig file
        {{- range $i, $server := .Values.hosts.servers }}
        {{ required (printf "The %s hosts.servers server should have a fqdn" $i) $server.fqdn }}:
            # The name of the host (dns or ip) to connect to,
            # if different from the inventory hostname.
            ansible_host: "{{if contains $.Values.hosts.all.connection.type "ssh"}}{{$server.ip}}{{else}}{{$server.name}}{{end}}"
            # The FQDN to avoid: https://docs.k3s.io/networking/basic-network-options#nodes-without-a-hostname
            # Some cloud providers, such as Linode, will create machines with "localhost" as the hostname
            # and others may not have a hostname set at all.
            # This can cause problems with domain name resolution.
            {{- /* Note: You can run K3s with the --node-name flag or K3S_NODE_NAME environment variable */}}
            {{- /* and this will pass the node name to resolve this issue. */}}
            kubee_os_hostname: "{{$server.fqdn}}"
        {{- end }}

    # No agent yet
    agent:
      # Empty map (not an empty array as this is map)
      hosts:

  vars:
    # With the host-specific parameter ansible_connection=<connector>
    # https://docs.ansible.com/ansible/latest/inventory_guide/intro_inventory.html#non-ssh-connection-types
    # see connection: ansible-doc -t connection -l
    ansible_connection: "{{ required "The hosts.connection.type is mandatory" .Values.hosts.all.connection.type}}"
    # The default username to use for log in. Most plugins default to the ‘current user running Ansible’.
    # Can be set via ANSIBLE_REMOTE_USER (default to the user executing Ansible)
    # https://docs.ansible.com/ansible/latest/reference_appendices/config.html#envvar-ANSIBLE_REMOTE_USER
    ansible_user: "{{ required "The hosts.connection.username is mandatory" .Values.hosts.all.connection.username}}"

    # See also https://docs.ansible.com/ansible/latest/reference_appendices/config.html#envvar-ANSIBLE_HOST_KEY_CHECKING
    k3s_version: "{{ required "The kubernetes k3s version is mandatory" .Values.version}}"
    #
    # By default, K3s uses a single static token for both servers and agents.
    # This token cannot be changed once the cluster has been created.
    # It is possible to enable a second static token that can only be used to join agents,
    # or to create temporary kubeadm style join tokens that expire automatically.
    # The k3s doc: https://docs.k3s.io/cli/token
    #
    # See k8s doc: Authentication Token (auth between nodes):
    # https://kubernetes.io/docs/reference/access-authn-authz/kubelet-tls-bootstrapping/#token-authentication-file
    # used in Kubelet Bootstrap initialization
    # https://kubernetes.io/docs/reference/access-authn-authz/kubelet-tls-bootstrapping/#bootstrap-initialization
    #
    # The token should be a random string of reasonable length. You can generate
    # one with the following commands:
    # - openssl rand -base64 64 | tr -d '\n'
    # - pwgen -s 64 1
    # - head -c 16 /dev/urandom | od -An -t x | tr -d ' '
    #
    # You can use a password manager to encrypt this value / keep it secret.
    # If omitted the first server automatically generate one.
    #
    # Don't change the token as the cluster data is encrypted with it
    #
    k3s_token: "{{ required "The kubernetes.k3s.token is required" .Values.k3s.token}}"

    # https://docs.k3s.io/cli/server
    # --kube-apiserver-arg="admission-control-config-file=/var/lib/rancher/k3s/server/psa.yaml"
    # --datastore-endpoint=postgres://username:password@hostname:port/database-name
    {{- $k3sServerArgs := .Values.k3s.server_args }}
    {{- if and (eq .Values.dex.enabled true) (eq .Values.distribution "k3s") }}
    {{- $k3sServerArgs = append $k3sServerArgs (printf "--kube-apiserver-arg=\"oidc-issuer-url=https://%s\"" .Values.dex.hostname) }}
    {{- $k3sServerArgs = append $k3sServerArgs "--kube-apiserver-arg=\"oidc-client-id=kubernetes\"" }}
    {{- $k3sServerArgs = append $k3sServerArgs "--kube-apiserver-arg=\"oidc-username-claim=email\"" }}
    {{- $k3sServerArgs = append $k3sServerArgs "--kube-apiserver-arg=\"oidc-groups-claim=groups\"" }}
    {{- end }}
    {{- if gt (len $k3sServerArgs) 0 }}
    k3s_extra_server_args:
{{ $k3sServerArgs | toYaml | indent 6}}
    {{- else }}
    k3s_extra_server_args: []
    {{- end }}
    # Admin user
    # An admin is created on the server if these values are not empty
    # The admin username
    kubee_os_admin_username: "{{.Values.hosts.all.admin_user.username}}"
    # The admin user Public key that is added to the `authorized_keys`
    # The key is mandatory if the admin username is not empty
    kubee_os_admin_public_key: "{{.Values.hosts.all.admin_user.public_key}}"
{{- end }}