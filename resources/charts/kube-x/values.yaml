# All these values are used in sub-chart
# to create template manifest

# Cluster Wide variables
cluster:
  # Admin user
  #  * created as admin user in Kubernetes and other app
  #  * added in basicAuth
  adminUser:
    username: 'admin'
    password: ''
    # Kubernetes clusterRole
    # * `cluster-admin` has full access
    # * `admin` does not have access to node and cluster scope related object such as ClusterRoleBinding
    clusterRole: 'cluster-admin'
    # The email
    # Used by default for instance for letsencrypt
    email: ''
  # Authentication of internal infra ingress (ie internal website such as Traefik Dashboard, ...)
  auth: basicAuth
  # Secret kind created
  secret: 'Secret'
  # Private Network ranges
  # used for Ingress Ip restrictions (Traefik IpAllowList)
  # example for a home ip: 143.176.206.80/32
  private_networks: []
  # email
  email:
    # Default smtp server parameters
    smtp:
      # The smtp host
      # if the host is not empty, smtp configuration are added
      # for example for argocd email notifications
      host: ''
      # the smtp port
      port: ''
      # the default from
      from: ''
      # the auth connection username
      username: ''
      # the auth connection password
      password: ''

  
# Kube-X Dashboard Variables
kubernetes_dashboard:
  # The external DNS
  # Example: hostname: 'dash.kube-x.dev'
  # If set, an ingress will be created
  hostname: ''

# Kube-X Traefik Variables
traefik:
  # Not a string, a boolean so no quote
  enabled: true
  # Instance/Release Name
  namespace: traefik
  # Middleware
  # https://doc.traefik.io/traefik/middlewares
  middleware:
    # Create a basic Auth Middleware
    # https://doc.traefik.io/traefik/middlewares/http/basicauth/
    # Enabled by default when the admin user password is not empty
    basicAuth:
      # List of extra users
      users:
      # user1: password1
  # Set the default certificate as default traefik cert
  # Mandatory for kubernetes-dashboard on a local development
  # The rootCA should be added to the OS/Browser as trusted root CA
  # https://doc.traefik.io/traefik/https/tls/#default-certificate
  defaultCertificate:
    # Path to the cert file relatif to the working directory (ie cluster directory)
    cert: ''
    key: ''
  # Traefik dashboard
  dashboard:
    # The FQDN is dnsName.apexDomain
    # If not empty, an ingress is created
    # example: hostname: 'traefik-haship.'
    hostname: ''

# The prometheus kube-x env
prometheus:
  # Enable or disable prometheus
  # Not a string, a boolean so no quote
  enabled: false
  # The installation namespace (used by Grafana to create the data source)
  namespace: 'prometheus'

# The cert manager kube-x env
cert_manager:
  # Not enabled by default
  # This is the kube-x template condition used to create certificate for ingress route
  # when disabled, the default traefik certificate is used
  # Not a string, a boolean so no quote
  enabled: false

  # The issuer used in all certificate request
  # of kube-x.
  # Should be changed to 'letsencrypt-prod'
  # when validated
  defaultIssuerName: 'letsencrypt-staging'

  acmeIssuers:
    prod:
      name: 'letsencrypt-prod'
      url: 'https://acme-v02.api.letsencrypt.org/directory'
    staging:
      name: 'letsencrypt-staging'
      url: 'https://acme-staging-v02.api.letsencrypt.org/directory'

  # Http01 challenge
  # https://cert-manager.io/docs/tutorials/acme/http-validation/
  # It is your responsibility to point each domain name at the correct IP address for your ingress controller.
  # Wildcard certificates are not supported with HTTP01 validation and require DNS01.
  # Disabled if ingressClassName is empty
  http01:
    # Default IngressClassName
    # Used by cert manager to create ingress resource to resolve the http01 challenge
    # A new ingress resource with a randomly generated name is created in order to solve the challenge.
    ingressClassName: traefik

  # Dns01 challenge
  # You don't need to publish a DNS A record
  # Doc: https://cert-manager.io/docs/configuration/acme/dns01/cloudflare/
  # Spec: https://cert-manager.io/docs/reference/api-docs/#acme.cert-manager.io/v1.ACMEIssuerDNS01ProviderCloudflare
  # Notes: in the doc, they use an email because they show an apiKey Auth, not an apiToken
  # `ApiToken` is now the preferred method
  dns01:
    cloudflare:
      # See cert-manager/README.md on how to get cloudflare api key
      # A secret or external secret can be created
      secret:
        # A Kubernetes secret will be created if not empty
        cloudflareApiToken: ''
        # An external secret will be created
        # if remote ref key is not empty
        externalSecretRemoteRef:
          key: ''
          property: ''
      # The dns Zones that are managed by cloudflare, mandatory
      dnsZones: []

whoami:
  # A non-empty Hostname will create an ingress
  # example: hostname: 'whoami.kube-x.dev'
  hostname: ''


# Grafana Operator
grafana:
  # Properties of the grafana instance
  instance:
    # The type of instance:
    # * internal: installation of grafana in the cluster
    # * external: grafana api (for instance: grafana cloud instance)
    # An empty type does not install any instance
    type: 'internal'
    # The hostname
    # A non-empty Hostname for a cluster instance will create an ingress
    # The hostname may be used in Prometheus alert to reference dashboard
    # For a Grafana cloud instance, you need to enter: <Grafana-cloud-stack-name>.grafana.net
    hostname: ''
    # The label
    # It's used :
    # * as selector to apply CRD objects such as Dashboard, .... to this instance. https://grafana.github.io/grafana-operator/docs/overview/#instanceselector
    # * as the instance name
    label: 'grafana'
    # The auth credential (used for an external instance)
    apiToken: ''

# Hashicorp Vault
vault:
  enabled: false
  # The hostname (create an ingress if not empty)
  hostname: ''
  # The installation namespace
  namespace: vault
  # A KV secret store
  kvSecretStore:
    # The Vault KV secret engine version.
    # This can be either "v1" or "v2", defaults to "v2"
    version: 2
    # the mount Path
    mountPath: 'secret'

# External Secrets
external_secrets:
  # Cluster Secret Store
  # We support only vault for now
  # If the api token is not empty and vault is enabled, a vault secret store is created
  store:
    name: 'kube-x-external-secret-store'
    vault:
      apiToken: ''

# Argocd
argocd:
  # This namespace should not change
  # https://argo-cd.readthedocs.io/en/stable/operator-manual/installation/#installing-argo-cd-in-a-custom-namespace
  namespace: argocd
  # The argocd hostname
  # if not empty, an ingress is created
  hostname: ''
  # Git
  git:
    # Repo
    # https://argo-cd.readthedocs.io/en/stable/operator-manual/argocd-repositories-yaml/
    repo:
      # The repo URL
      # !!! The extension `.git` is mandatory in the URL
      # Not https://github.com/user/argocd but https://github.com/user/argocd.git
      url: ''
      # Basic Auth
      username: ''
      password: ''
    # WebHook auth
    # https://argo-cd.readthedocs.io/en/latest/operator-manual/webhook/
    webhook:
      # The service (github, gitlab, gogs, bitbucket, azuredevops)
      service: 'github'
      secret: ''
      username: ''
      password: ''
      uuid: ''
  # ArgoCd Configuration
  conf:
    # Control the `--kubectl-parallelism-limit` parameters of [argocd-application-controller](https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-application-controller/)
    # Number of allowed concurrent kubectl fork/execs. Any value less the 1 means no limit. (default 20)
    # We change the default to avoid CPU spike: https://github.com/argoproj/argo-cd/discussions/6964#discussioncomment-1164100
    controller_kubectl_parallelism_limit: 1
    # Control the `reposerver.parallelism.limit` parameter
    # [argocd-repo-server](https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-repo-server/)
    # Limit on number of concurrent manifests generate requests (manifest tool invocations)
    # We change the default to avoid CPU spike: https://github.com/argoproj/argo-cd/discussions/6964#discussioncomment-1164100
    reposerver_parallelism_limit: 1
    # Control the `--metrics-cache-expiration duration` parameter (disabled  by default. e.g. 24h0m0s) of [argocd-application-controller](https://argo-cd.readthedocs.io/en/stable/operator-manual/server-commands/argocd-application-controller/)
    # As recommended here: https://argo-cd.readthedocs.io/en/stable/operator-manual/metrics/#application-controller-metrics
    controller_metrics_cache_expiration: '24h0m0s'
