{{- range .Values.kube_x.cert_manager.acmeIssuers }}
# Create a ClusterIssuer (can issue cert for the whole cluster)
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
# `Issuer` kind is scoped to a namespace
metadata:
  name: '{{ .name }}'
  namespace: '{{ include "cert-manager.namespace" . }}'
spec:
  acme:
    # The ACME server URL
    server: '{{ .url }}'
    # Email address used for ACME registration
    email: '{{ $.Values.kube_x.cluster.adminUser.email }}'
    # Name of a secret used to store the ACME account private key
    privateKeySecretRef:
      name: '{{ .name }}'
    # Enable the HTTP-01 challenge provider
    solvers:
      # An empty 'selector' means that this solver matches all domains
      - selector: {}
        # https://cert-manager.io/docs/tutorials/acme/http-validation/
        # It is your responsibility to point each domain name at the correct IP address for your ingress controller.
        # Wildcard certificates are not supported with HTTP01 validation and require DNS01.
        http01:
          ingress:
            # Configure which Ingress controller is used to resolve the challenge
            # If the ingressClassName field is specified,
            # a new ingress resource with a randomly generated name
            # will be created in order to solve the challenge.
            # This new resource will have the field ingressClassName with the value of the ingressClassName field.
            # Value: nginx or traefik
            ingressClassName: '{{ $.Values.kube_x.cert_manager.http01.ingressClassName }}'
      # Selector: 'DnsName', `DnsZone`, `matchLabels` can be specified
      # https://cert-manager.io/docs/configuration/acme/#adding-multiple-solver-types
      - selector:
          # The selector is a DNS Zone
          # To allow the creation of certificate on ingress spec. This is not:
          # * a matchLabel because it is not possible to set a label/annotation for cert-manager in an ingress spec
          # * a DNSName because it must be exact and is obviously unknown in advance
          # noinspection KubernetesUnknownValues
          dnsZones:
            {{- toYaml .Values.dnsZones | nindent 12 }}
        # https://cert-manager.io/docs/configuration/acme/dns01/
        dns01:
          # Doc: https://cert-manager.io/docs/configuration/acme/dns01/cloudflare/
          # Spec: https://cert-manager.io/docs/reference/api-docs/#acme.cert-manager.io/v1.ACMEIssuerDNS01ProviderCloudflare
          cloudflare:
            # Note in the doc, they use an email because they show an apiKey Auth, not an apiToken
            # `ApiToken` is now the preferred method
            apiTokenSecretRef:
              name: '{{ include "cert-manager-cloudflare-secret-name" . }}'
              key: '{{ include "cert-manager-cloudflare-secret-key" . }}'
{{-end}}