# Ref: https://prometheus.io/docs/prometheus/latest/configuration/unit_testing_rules/

# This is a list of rule files to consider for testing. Globs are supported.
#rule_files: [ "yolo" ]

evaluation_interval: 1m # default = 1m

# The order in which group names are listed below will be the order of evaluation of
# rule groups (at a given evaluation time). The order is guaranteed only for the groups mentioned below.
# All the groups need not be mentioned below.
#group_eval_order:
#  [ - <group_name> ]

# All the tests are listed here.
tests:
  # Test 1.
  - name: ArgoCd Test
    # Time between interval in the series
    interval: 1m
    # Series data.
    input_series:
      # Ref: https://prometheus.io/docs/prometheus/latest/configuration/unit_testing_rules/#series
      - series: 'argocd_app_info{health_status="Degraded", name="appName"}'
        # 10 scrapes at 1min interval with the same value, ie 1
        values: '1+0x10'
    # Unit tests for promql expressions.
    promql_expr_test:
      # Unit test 1 / Testcase
      # Ref: https://prometheus.io/docs/prometheus/latest/configuration/unit_testing_rules/#promql_test_case
      # Diff at minima: 606361
      # time() - 1731433061 > bool 606387
      # vector(0)
      - expr: 'avg_over_time(argocd_app_info{health_status!="Healthy"}[5m])==1'
        # The coordinate in time elapsed (number of scrape points used in the series, you see them with `promtool test --debug` option)
        eval_time: 5m
        # If the query does not return any series (ie expression in the left part), you have to provide an empty list to exp_samples.
        # otherwise you get a FAILED with `got: nil`
        exp_samples:
          # Sample 1.
          - labels: '{health_status="Degraded", name="appName"}'
            value: 1

    # Unit test for alerting rules.
    alert_rule_test:
      # Unit test 1
      # https://prometheus.io/docs/prometheus/latest/configuration/unit_testing_rules/#alert_test_case
      # Alert name to be tested
      - alertname: ArgoCdNonHealthyApp
        # The time elapsed from time=0s when the alerts have to be checked.
        # The coordinate in time elapsed (number of scrape points used in the series, you see them with `promtool test --debug` option)
        eval_time: 5m
        # List of expected alerts which are firing under the given alertname at given evaluation time.
        # An empty list means we expect no alert
        exp_alerts:
          # Alert 1.
          - exp_labels:
              severity: critical
              name: appName
              health_status: Degraded
            exp_annotations:
              summary: "ArgoCd appName status is Degraded"
              description: "An app should be not be in a non-healthy state for more than 5 minutes"

