
---
# The certificate
# (Because we use IngressRoute, it needs to be created manually)
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: traefik-dashboard-cert
  namespace: '{{ traefik_namespace }}'
  labels:
    # use cloudflare Dns
    "issuer-challenge": "dns01-cloudflare"
spec:
  commonName: '{{ traefik_dashboard_hostname }}'
  secretName: '{{ traefik_dashboard_cert_secret_name }}'
  dnsNames:
    - '{{ traefik_dashboard_hostname }}'
  issuerRef:
    kind: ClusterIssuer
    name: '{{ kube_cert_manager_issuer_name }}'
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: traefik-dashboard-http-to-https
  namespace: '{{ traefik_namespace }}'
spec:
  redirectScheme:
    permanent: true
    scheme: https
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: traefik-dashboard-https
  namespace: '{{ traefik_namespace }}'
  labels:
    app.kubernetes.io/name: traefik
spec:
  entryPoints:
    - websecure
  # cert-manager automatically creates a new Certificate resource
  # for the specified domain with the given secretName
  tls:
    # the secret name used to store the certificate
    secretName: '{{ traefik_dashboard_cert_secret_name }}'
  routes:
    - kind: Rule
      # Host rule as advised in the doc, and it's much easier to get to the dashboard from the root (no trailing slash after dashboard)
      match: Host(`{{ traefik_dashboard_hostname }}`)
      services:
        # dashboard and api are in the same pod
        - kind: TraefikService
          name: api@internal
      middlewares:
        - name: traefik-dashboard-http-to-https
        - name: '{{ traefik_middleware_auth_name }}'
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: traefik-dashboard-http
  namespace: '{{ traefik_namespace }}'
  labels:
    app.kubernetes.io/name: traefik
spec:
  entryPoints:
    - web
  routes:
    - kind: Rule
      # Host rule as advised in the doc, and it's much easier to get to the dashboard from the root (no trailing slash after dashboard)
      match: Host(`{{ traefik_dashboard_hostname }}`)
      services:
        # dashboard and api are in the same pod
        - kind: TraefikService
          name: api@internal
      middlewares:
        - name: traefik-dashboard-http-to-https
