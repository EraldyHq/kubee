

traefik:
  image:
    # to 3.0.3, the default repo is
    # https://hub.docker.com/r/rancher/mirrored-library-traefik/tags
    # and does not have 3.0.3
    # if you change it, you need to apply the corresponding crd
    # https://doc.traefik.io/traefik/user-guides/crd-acme/#ingressroute-definition
    # example: kubectl apply -f https://raw.githubusercontent.com/traefik/traefik/v3.0.3/docs/content/reference/dynamic-configuration/kubernetes-crd-definition-v1.yml
    # otherwise you may not be able to apply specific middleware for this version
    registry: docker.io
    repository: traefik
    name: traefik
    tag: 3.0.3
  service:
    ipFamilyPolicy: SingleStack
    ipFamilies:
      - IPv4
    spec: {
      # Allow Origin Remote IP to be forwarded
      externalTrafficPolicy: Local
    }
  nodeSelector: {
    # Context, by default:
    # * the deployment of Traefik is `LoadBalancer`
    # * K3s uses `ServiceLB (Klipper)` as load balancer controller
    # * ServiceLB (Klipper) label node "svccontroller.k3s.cattle.io/enablelb"=true to control where load balancer controller pods are installed
    #
    # We use the ServiceLB (Klipper) label "svccontroller.k3s.cattle.io/enablelb"=true
    # so that Traefik and the load balancer controller pods are always collocated
    #
    # ie with the following label applied on `kube-server-01.eraldy.com`
    #
    # kubectl label nodes kube-server-01.eraldy.com svccontroller.k3s.cattle.io/enablelb=true
    #
    # Traefik would be installed on kube-server-01.eraldy.com
    "svccontroller.k3s.cattle.io/enablelb": "true"
  }
  additionalArguments:
    - '--experimental.plugins.sablier.modulename=github.com/acouvreur/sablier'
    - '--experimental.plugins.sablier.version=v1.7.0'
    # Debug
    #- '--log.level=DEBUG'
    # Logs just add too much noise on what is going on
    #- '--accesslog=true'
    # Don't verify cert on self-signed cert
    - '--serversTransport.insecureSkipVerify=true'
    # Enable Prometheus Metrics https://doc.traefik.io/traefik/observability/metrics/prometheus/
    # Metrics Info: https://doc.traefik.io/traefik/observability/metrics/overview/#global-metrics
    - '--metrics.prometheus=true'
  ingressRoute:
    # https://github.com/traefik/traefik-helm-chart/blob/master/EXAMPLES.md#access-traefik-dashboard-without-exposing-it
    dashboard:
      enabled: false
  providers:
    kubernetesCRD:
      # return 503, needed to start stopped container with sablier
      # https://acouvreur.github.io/sablier/#/guides/code-server-traefik-kubernetes?id=_3-deploy-traefik-using-helm
      allowEmptyServices: true
    kubernetesIngress:
      # return 503, needed to start stopped container with sablier
      allowEmptyServices: true
  ports:
    web:
      redirectTo:
        port: websecure
    websecure:
      # Enable X-Headers from Cloudflare
      # https://doc.traefik.io/traefik/v2.3/routing/entrypoints/#forwarded-headers
      forwardedHeaders:
        trustedIPs: "{{ cloudflare_cidr | join(',') }}"
  metrics:
    prometheus:
      # The metrics port is not in the traefik service
      # This value creates a dedicated metrics service to use with ServiceMonitor
      service:
        enabled: true
  persistence:
  # -- Enable persistence using Persistent Volume Claims
  # ref: http://kubernetes.io/docs/user-guide/persistent-volumes/.
  # It can be used to store TLS certificates along with `certificatesResolvers.<name>.acme.storage`  option